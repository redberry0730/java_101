**자료형 - 데이터에 이름을 붙이는 것
1.데이터 분류
1)쓰기 가능 여부
=>읽기만 가능(상수)
=>읽기 와 쓰기가 모두 가능(변수)

2)데이터 개수에 따른 분류
=>하나의 데이터만 저장하는 것 - Scala Data : 이름 자체가 데이터를 의미
=>0개 이상의 데이터를 저장하는 것 - Vector Data(Collection) : 이름이 데이터를 의미하는 것이 아니고 데이터에 접근할 수 있도록 위치를 제공해서 위치에서 인덱스(순번) 또는 이름으로 세부 데이터를 찾아갑니다.

2.데이터에 이름 붙이는 방법 - Scala Data : 데이터 1개 짜리에 이름을 만드는 방법
[final - 붙이면 데이터를 읽기만 가능합니다.]  자료형 이름;
=>자료형은 저장할 데이터의 종류를 나타냅니다.
=>이름은 사용자가 만드는 규칙 - 어기면 안됩니다.
중간에 공백은 안됩니다.
영어나 한글 또는 _ 또는 $로 시작해야 하고 숫자로 시작하면 안됩니다.
두번째 글자 부터는 숫자, 영어, 한글, 특수문자(_, $) 도 가능
하나의 영역에서 동일한 이름을 2번 만들면 안됩니다.
이름을 만들 때는 반드시 앞에 자료형이 있어야 합니다.

=>이름을 만들 때의 권장 사항
한글로 만드는 것을 비추천
클래스 이름이 아니면 소문자로 시작하는 것을 권장합니다.
2개 단어 이상의 조합으로 만들어질 때는 두번째 단어는 대문자로 시작하고 나머지는 소문자로 작성합니다.
언어마다 조금씩 다름
이름을 짧게 만드는 것은 좋지 못한 습관이며 이름을 보면 무엇을 하는 것인지 알 수 있도록 길게 만드는 것이 좋습니다.

3.하나를 저장할 수 있는 자료형
boolean : true, false 만 저장

숫자
정수
byte : +- 127
short : +- 32767
char: 정수인데 출력할 때만 정수에 해당하는 코드를 출력합니다.
int : +- 21억
long : 모든 정수

실수
float: 10 의 38승
double: 10의 308승

일반 정수: 숫자
long 형 정수: 숫자L

일반 실수(double): 3.28
float 형 실수: 3.28f

자신의 범위를 넘어가는 데이터는 저장할 수 없습니다.
자신의 범위보다 큰 자료형의 데이터도 저장할 수 없습니다.

데이터에 이름을 붙일때는
데이터이름 = 데이터;
int a = 10;

int b; //이름을 만든 것
b = 20; //20이라는 값을 저장하고 b라는 이름으로 사용할 수 있도록 한 것입니다.

int a = 30;
int a = 40; //동일한 이름을 만들어서 에러 

int b = 50;
b =  70; //앞에서 만든 b라는 이름을 재사용하는 것이라서 가능

4.문자 - char
=>'문자' 형태로 작성
=>저장이 될 때는 문자에 해당하는 코드로 변경을 해서 저장합니다.
=>문자 대신에 정수로 설정해도 됩니다.
=>대문자 A 는 65 B는 66 , 소문자 a는 97, b 는 98
=>컴퓨터에서는 소문자가 대문자보다 큽니다.
=>char는 출력할 때만 문자로 출력합니다.
=>제어문자(White Space) - 모든 프로그래밍 언어 공통
\ 다름에 영문자 하나를 추가해서 특별한 기능을 부여한 문자
\n: 줄바꿈
\t: 탭
\0: null - 가리키는 것이 없음을 나타냄
\\: \
\': '
\": "

5.Type Casting(형 변환)
=>데이터의 자료형이 변경되는 것
1)자동 형 변환
=>프로그래머가 의도하지 않았는데 자동으로 데이터의 자료형이 변경되는 경우
=>숫자 자료형 에서 표현 범위가 더 큰 자료형의 변수에 작은 자료형의 데이터를 대입할려고 하는 경우

double d = 10; //실수 자료형 d  와 10은 int 라서 자료형이 다름
//실수가 정수보다 크기 때문에 에러는 아닙니다.
//위의 문장을 이렇게 수정해서 실행합니다.
double d = 10.0;

=>숫자끼리 +, - , *, /를 할 때 2개의 자료형이 다르면 표현범위가 더 큰 자료형으로 변경해서 계산을 합니다.

10 + 35.7 => 10.0 + 35.7 = 45.7

2)강제 형 변환 - 중요
=>데이터의 자료형을 강제로 변경시키는 것
(변경하고자 하는 자료형)데이터
숫자 데이터는 숫자 데이터로만 변환 할 수 있습니다.
원하는 결과를 얻어내거나 표현범위가 큰 데이터를 표현 범위가 작은 공간에 대입할 수 있도록 하기 위해서입니다.
실수를 정수로 변환하면 소수는 사라집니다.

int n = (int)20.7; //20.7을 int로 변경해서 20을 저장합니다.

6.Overflow & Underflow
=>자신이 표현할 수 있는 숫자의 표현 범위를 넘어선 것
=>Overflow는 큰 쪽으로 넘어선 것으로 강제로 형 변환을 하면 가장 작은 숫자부터 다시 올라갑니다. 많이 사용하는 용어로 넘치는 것을 의미합니다.
=>Underflow는 작은 쪽으로 넘어선 것으로 강제로 형 변환을 하면 가장 큰 숫자부터 다시 시작합니다.

7.문자열을 저장하기 위한 변수
=>문자열: 0개 이상의 문자 집합
=>표현을 할 때는 "문자를 나열"
=>자료형의 이름은 String
=>이름을 저장하고자 하면
String name = "아담";
System.out.println(name);

8.연습문제
=>자신의 이름 과 나이 와 키를 저장하는 변수를 만들고 이것을 출력해봅니다

**연산자(Operator)
=>계산을 도와주는 명령어나 기호

1.분류
1)피연산자(연산을 할 때 필요한 데이터)의 개수에 따른 분류
단항(Unary): 데이터가 1개만 있으면 되는 연산자, 부호+, 부호-, ++, -- 등
이항(Binary): 데이터가 2개 있으면 되는 연산자 +, -, *, / 등
삼항(Tenary): 데이터가 3개 있으면 되는 연산자 - ? :

2)연산의 결과 자료형에 따른 분류
산술 연산자 - 연산의 결과가 숫자인 연산자
논리 연산자 - 연산의 결과가 boolean(true, false) 인 연산자

2.최우선 연산자: 가장 먼저 수행합니다.
.: 자신의 멤버를 호출할 때 사용하는 연산자
[숫자]: 배열의 크기를 설정하거나 배열에서 인덱스를 표현
 
3.단항 연산자 - 데이터가 1개만 있으면 수행되는 연산자
1)부호 + , 부호 -(2의 보수) : 양수나 음수를 표현하기 위해서 사용
2)!: boolean 데이터에만 사용하는 것으로 true이면 false로 만들어주고 false 이면 true로 만들어 줍니다. 읽을 때는 not 이라고 합니다.
3)~: 정수 데이터에만 사용하는 것으로 1의 보수를 구해주는 연산자




























