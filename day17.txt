**객체 직렬화(Serialization)
=>객체 단위로 파일이나 네트워크를 통해서 전송하는 것
=>기본 자료형 과 문자열은 파일이나 네트워크를 통해서 전송이 되지만 개발자가 직접 만든 클래스의 객체는 파일이나 네트워크를 통해서 직접 전송할 수 없음
=>자바에서는 Serializable 인터페이스를 implements 하면 객체 단위로 전송이 가능
=>입 출력은 ObjectInputStream  과 ObjectOutputStream 을 이용
=>응용 프로그램을 기록을 하고 읽는 방식이 이 방식
파워포인트에서 작성한 문서를 아래 한글에서 읽을 수 없는 이유는 클래스 구조를 모르기 때문

import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.Serializable;

class Student implements Serializable{
	private int num;
	private String name;
	
	public Student() {
		super();
		// TODO Auto-generated constructor stub
	}
	public Student(int num, String name) {
		super();
		this.num = num;
		this.name = name;
	}
	
	public int getNum() {
		return num;
	}
	public void setNum(int num) {
		this.num = num;
	}
	public String getName() {
		return name;
	}
	public void setName(String name) {
		this.name = name;
	}
	
	@Override
	public String toString() {
		return "Student [num=" + num + ", name=" + name + "]";
	}
}

public class SerializableMain {
	public static void main(String[] args) {
		//객체 단위로 데이터를 저장
		try(
				//파일에 객체 단위로 데이터를 기록할 클래스의 객체를 생성
				ObjectOutputStream oos = new ObjectOutputStream(
				new FileOutputStream("./object.dat"));
				
				ObjectInputStream ois = new ObjectInputStream(
					new FileInputStream("./object.dat"))){
			
			Student student1 = new Student(1, "유관순");
			//파일에 기록을 할려면 인스턴스의 클래스가 Serializable 인터페이스를
			//implements 해야 합니다.
			oos.writeObject(student1);
			
			//하나의 데이터 읽기 - 원래의 자료형으로 되돌려 주어야 함
			Student student2 = (Student)ois.readObject();
			System.out.println(student2);
			
		}catch(Exception e) {
			System.out.println("파일 기록 및 읽기 실패");
			//이 문장은 프로그램을 만들고 나면 삭제
			System.out.println(e.getMessage());
		}
	}
}

**Network
1.용어
1)Protocol: 데이터 송수신을 위한 규칙 - 데이터를 주고 받기 위해서 설정하는 규약

2)TCP/IP: 인터넷 프로토콜

3)HTTP: Hyper Text Transfer Protocol - 인터넷 상에서 문서를 주고받기 위한 프로토콜

4)HTTPS: Hyper Text Transfer Protocol over Secure Socket Layer - HTTP 에 보안 기능이 추가된 프로토콜

5)IP Address: 컴퓨터를 구분하기 위한 숫자로 된 주소
=>IPv4: 0~255까지 숫자 4개를 . 으로 구분 - 이전에 사용하던 주소 방식
=>IPv6: 16진수 4자리 식을 8개를 : 으로 구분 - 현재 사용하는 주소 방식

6)Port: 컴퓨터 안에서 응용 프로그램을 구분하기 위한 숫자
0 ~ 65535까지
0~1023번까지는 직접 사용하는 것은 권장하지 않음 
대부분 시스템이 예약한 기능
HTTP:80
HTTPS: 443

7)Domain: IP 주소를 대신하는 문자로 된 주소

8)URL: 인터넷 상에서의 문서의 위치

9)주소 표기 방법
=>컴퓨터를 구분하기 위한 IP 주소
IP주소:포트번호

=>인터넷 상에서의 문서를 구분 - URL
프로토콜://IP 또는 도메인:포트번호/요청 경로(파일 경로)?파라미터이름=값&파라미터이름:값...

IP 나 도메인 까지는 생략 못함

포트번호는 기본 서비스 번호일 때는 생략이 가능

요청 경로도 생략 가능 - 서버 설정에 따라 보여지는 내용이 결정
파일 경로라고 하는데 요청 경로를 가지고 서버가 라우팅을 해서 출력할 내용을 결정

? 뒷 부분을 파라미터 라고 하기도 하고 query string 이라고 하기도 합니다.
클라이언트가 서버에게 전달하는 데이터 - 구조가 이름 과 값의 쌍으로 만들어 집니다.
여러 개 만들 때는 & 로 구분
query string은 반드시 인코딩이 되어야 합니다 - 중요
웹 프로그래밍을 공부하게 되면 파라미터를 한글로 전송하는 것과 파일이름이 한글인 파일을 업로드 하고 다운로드 하는 부분입니다.

10)웹 프로그래밍에서 요청(request) 방식
get: 파라미터를 url 뒤에 붙여서 전송하는 것, 검색할 때 이 방식

post: 파라미터를 헤더에 숨겨서 전송하는 것, 검색을 제외한 경우는 대부분 이 방식 - 보안이 우수하고 파라미터 길이에 제한이 없기 때문에 

2.URL
=>URL을 나타내기 위한 클래스
URL(String spec)
URL(String protocol, String host, int port, String 요청 경로)

=>URL을 규칙에 맞지 않게 입력하면 MalformedURLException 이 발생

=>URL에 연결
URLConnection URL.openConnection()

3.URLConnection
=>실제 통신을 위한 클래스 - 추상 클래스
=>URL.openConnection 으로 리턴한 객체를 HttpURLConnection 으로 강제 형 변환해서 사용

1)옵션을 설정
setConnectTimeout(int timeout): 연결 제한 시간 설정
setUseCaches(boolean newValue): 캐시(브라우저에 저장)를 사용할 지 여부
setRequestProperty(String field, String newValue): 헤더에 값을 설정
addRequestProperty(String field, String newValue): 헤더에 값을 추가
setRequestMethod(String method): 전송 방식을 설정 - 기본은 GET

2)응답을 확인
int getResponseCode()
100번대 - 요청을 받았고 처리 중
200번대 - 정상 응답
300번대 - 리다이렉트 중
400번대 - 클라이언트 오류
500번대 - 서버 오류

3)데이터를 가져오기 위한 스트림
InputStream getInputStream()
=>문자를 다운로드 받을 때 한글이 깨지면 InputStreamReader 를 만들 때 주의
new InputStreamReader(InputStream)URLConnection.getContent(). "인코딩방식")

4. 이미지 파일을 다운로드 받아서 컴퓨터에 저장하기
=>이미지 파일을 다운로드 받을 URL : https://blog.kakaocdn.net/dn/kBs7O/btqyK9dkl42/YMWukD9LIbnNvVRkIWcMa0/img.jpg

import java.io.BufferedInputStream;
import java.io.PrintStream;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.URL;

public class ImageDownload {

	public static void main(String[] args) {
		//이미지 다운로드
		try {
			//1.다운로드 받을 파일의 URL을 생성
			//URL에 한글이 있다면 URLEncoder.encode를 이용해서 인코딩을 하고 생성
			URL url = new URL(
				"https://blog.kakaocdn.net/dn/kBs7O/btqyK9dkl42/YMWukD9LIbnNvVRkIWcMa0/img.jpg");
			
			//2.연결 객체 생성
			HttpURLConnection con = 
					(HttpURLConnection)url.openConnection();
			
			//3.옵션 설정 - 요청 방식, 헤더 값 설정, 파라미터 생성
			con.setConnectTimeout(30000);//연결 제한 시간 설정
			con.setUseCaches(false);//항상 새로운 데이터를 가져옴
			
			//4.데이터를 읽어올 준비 - 텍스트 인지 아닌지에 따라 구분
			//이번에는 이미지 파일
			//바이트 스트림 생성
			BufferedInputStream bs = 
					new BufferedInputStream(con.getInputStream());
			
			//기록할 파일스트림을 생성
			PrintStream ps = new PrintStream("./img.jpg");
			
			//5.읽어서 파일에 기록
			while(true) {
				//읽어올 버퍼를 생성
				byte [] laster = new byte[128];
				//읽기
				int len = bs.read(laster);
				//읽은 데이터가 없으면 종료
				if(len <= 0) {
					break;
				}
				//읽어 낸 만큼 파일에 기록
				ps.write(laster, 0, len);
			}
			
			//6.정리
			ps.flush();
			ps.close();
			
			bs.close();
			
			con.disconnect();
			
			
			
		} catch (Exception e) {
			e.printStackTrace();
		}

	}

}

5.문자열을 저장하고 출력하기
=>문자열을 다운로드 받을 URL: https://www.google.com
import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.URL;

public class TextDownload {

	public static void main(String[] args) {
		try {
			//1.다운로드 받을 URL을 생성
			URL url = new URL("https://www.google.com");
			
			//2.연결 객체 생성
			HttpURLConnection con = 
					(HttpURLConnection)url.openConnection();
			
			//3.옵션 설정 - 요청 방식, 헤더 값 설정, 파라미터 생성
			con.setConnectTimeout(30000);//연결 제한 시간 설정
			con.setUseCaches(false);//항상 새로운 데이터를 가져옴
			
			//4.문자열을 다운로드 받을 스트림 생성
			BufferedReader br = new BufferedReader(
				new InputStreamReader(con.getInputStream()));
			//한글이 깨지면 설정
			/*
			BufferedReader br = new BufferedReader(
					new InputStreamReader(con.getInputStream(), "euc-kr"));
			*/
			
			//다운로드 받은 문자열을 저장할 객체
			StringBuilder sb = new StringBuilder();
			
			//5.데이터 읽기
			while(true) {
				//줄단위로 읽기
				String line = br.readLine();
				//읽은게 없으면 종료
				if(line == null) {
					break;
				}
				//읽은 데이터는 line에 추가
				sb.append(line + "\n");
			}
			
			//다운로드 받은 내용을 문자열로 변환
			String msg = sb.toString();
			System.out.println(msg);
			
			//정리
			br.close();
			con.disconnect();
			
		}catch(Exception e) {
			System.out.println("다운로드 실패");
			System.out.println(e.getLocalizedMessage());
		}

	}

}

6.네트워크 작업을 할 때 고려할 사항
=>네트워크 작업은 오랜 시간이 걸리는 작업
=>되도록 이면 스레드로 만들어야 합니다.
=>안드로이드 나 iOS 같은 스마트 폰에서는 스레드를 사용하지 않으면 예외를 발생시킴

new Thread(){
	public void run(){
		네트워크 작업 코드 
	}
}.start();

7.Open API
=>애플리케이션을 만들기 위한 라이브러리나 데이터를 공개해서 사용할 수 있도록 해주는 것
=>보통은 Open API는 아무런 제약없이 사용할 수 있는 경우 도 있고 key를 발급 받아서 사용해야 하는 경우도 있으며 헤더에 키를 설정해서 사용해야 하는 경우도 있습니다.
=>Kakao 검색 API를 이용해서 데이터를 다운로드

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.URLEncoder;

public class KakaoOpenAPI {

	public static void main(String[] args) {
		//스레드 객체를 만들어서 실행
		new Thread() {
			public void run() {
				
				try {
					//한글 인코딩 : 삼국지
					String title = "삼국지";
					String keyword = URLEncoder.encode(title, "utf-8");
					
					//URL 만들기
					URL url = new URL(
						"https://dapi.kakao.com/v3/search/book?target=title&query=" 
							+ keyword);
					HttpURLConnection con = 
							(HttpURLConnection)url.openConnection();
					//헤더 설정 - key를 설정
					con.setRequestProperty("Authorization",
							"KakaoAK 53525837974dc6a0f136c222c6959e8c");
					
					//문자열을 가져오기 위한 준비
					BufferedReader br = 
						new BufferedReader(new InputStreamReader(
							con.getInputStream()));
					StringBuilder sb = new StringBuilder();
					
					while(true) {
						String line = br.readLine();
						if(line == null) {
							break;
						}
						sb.append(line + "\n");
					}
					
					br.close();
					con.disconnect();
					
					String msg = sb.toString();
					System.out.println(msg);
					
				}catch(Exception e) {
					System.out.println("데이터 가져오기 실패");
					System.out.println(e.getMessage());
				}
				
				
			}
		}.start();

	}

}


8.외부 라이브러리 제공 사이트
www.mvnrepository.com





