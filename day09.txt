**Inheritance(상속)
=>하위 클래스가 상위 클래스의 모든 것을 물려받는 것
=>이 관계를 is a 관계라고도 합니다.
=>상속을 사용하는 이유
하위 클래스들에 공통된 요소가 있을 때 이를 상위 클래스로 묶어서 재사용하기 위해서

제공되는 클래스의 기능을 확장하기 위해서

1.상속의 용어
1)상위 클래스 - 물려주는 클래스, super class, base(기반) class
2)하위 클래스 - 물려받는 클래스, sub class, derived(파생) class

3)단일 상속: 하나의 클래스로부터 물려받는 것
4)다중 상속: 2개 이상의 클래스로부터 물려받는 것

자바는 단일 상속만 지원합니다.(c++ 이나 python 은 다중 상속을 지원)

2.java는 java.lang.Object 라는 클래스를 상속받아야 합니다.
자바에서 상위 클래스를 기재하지 않으면 Object 클래스를 상속받은 것으로 간주 합니다.

3.상속하는 방법
class 클래스이름 extends 상위 클래스 이름{


}

4.접근 지정자에 따른 상속
private: 상속은 되지만 하위 클래스에서는 사용할 수 없음 - c++ 같은 언어에서 메모리 사이즈를 확인해보면 상속이 된다는 것을 알 수 있습니다.

default(package): package 내에서는 public 이 되고 package 외부에서는 private 이 됩니다.

protected: package 내에서는 public 이 되고 package 외부에서는 상속받은 클래스에서는 사용 가능, 인스턴스는 사용을 못함

public: 하위 클래스에서 사용할 수 있고 인스턴스도 사용 가능

5.this 와 super
=>메소드 안에서 변수를 사용하면 가장 가까운 곳에서 만든 변수를 찾습니다.
=>메소드 안에서 만든 지역변수 와 클래스에 만든 프로퍼티가 이름이 같을 때 클래스에 만든 것을 사용하고자 할 때는 this. 을 붙여서 호출하면 됩니다.
=>상위 클래스에서부터 찾고자 할 때는 super.을 붙이면 됩니다.

6.super()
=>하위 클래스의 생성자에서만 사용할 수 있는 것으로 맨 첫번째로 나와야 하는데 상위 클래스의 생성자를 호출하는 것입니다.
=>상위 클래스이 매개변수가 없는 생성자가 없을 때는 하위 클래스에 생성자를 만들어서 상위 클래스의 생성자를 직접 호출해야 합니다.

7.상속 관계에서의 인스턴스 대입
1)상위 클래스 타입의 변수에는 하위 클래스 타입의 인스턴스 참조를 대입할 수 있다.

2)하위 클래스 타입의 변수에 상위 클래스 타입의 인스턴스 참조는 대입할 수 없다.
강제 형 변환을 하면 대입할 수 있습니다.
인스턴스의 원래 자료형이 하위 클래스 타입이면 사용할 수 있지만 그렇지 않으면 실행 중에 예외가 발생합니다.

8.Method Overriding
=>상위 클래스의 메소드를 하위 클래스에서 다시 정의 하는 것 - 메소드 재정의

9.상속 관계에서의 멤버 호출
=>상위 클래스 타입의 변수에 하위 클래스 타입의 인스턴스를 대입할 수 있는데 이 때 호출할 수 있는 멤버는 변수를 선언할 때 사용한 클래스 타입을 가지고 찾아옵니다.
=>오버라이딩 된 메소드는 변수를 선언할 때 사용한 클래스 타입을 따르지 않고 대입된 인스턴스를 확인해서 메소드를 호출합니다.

**Polymorphism(다형성)
=>동일한 메시지에 대하여 다르게 반응하는 것
=>동일한 코드가 대입된 인스턴스에 따라서 다른 메소드를 호출하는 것

**Abstract(추상)
1.Abstract Class(추상 클래스)
=>인스턴스를 만들 수 없는 클래스 - 생성자를 호출하지 못합니다.
new 를 못합니다.
=>변수는 만들 수 있습니다.
=>상속을 통해서만 사용이 가능합니다.

2.Abstract Method(추상 메소드)
=>내용이 없는 메소드 - { } 가 없는 메소드
=>이 메소드는 추상 클래스 와 인터페이스에만 존재해야 합니다.
=>추상 메소드를 가진 클래스를 상속받으면 이 메소드는 반드시 구현해야 합니다.
하위 클래스에서 구현 또는 재정의 하지 않으면 에러가 발생합니다.

**Interface
1.Interface
=>추상 메소드 와 상수(변경할 수 없는 데이터) 만을 가진 것
=>실제 사용할 수 있는 내용은 없습니다.

2.생성
interface 인터페이스 이름{
	메소드 (); //자동으로 앞에 abstract 가 추가 됩니다.
	자료형 변수명 = 초기값; //자동으로 앞에 final이 추가 됩니다.
}

3.클래스에 구현
class 클래스이름 extends 상위클래스이름 implements 인터페이스 이름 나열{
	인터페이스 의 메소드를 구현
}

4.인터페이스는 여러 개 구현할 수 있습니다.
=>인터페이스의 목적이 무엇? 다중 상속 - 틀린 말입니다.
자바는 다중 상속을 지원하지 않습니다.
인터페이스는 내용이 없기 때문에 상속이 아니고 구현이라고 합니다.
=>인터페이스를 만드는 목적은 템플릿 프로그래밍의 구현입니다.
C 언에서 h(헤더 - 모양) 파일 과 c(구현) 파일을 만드는 것과 같습니다.

5.템플릿 메소드 프로그래밍
=>모양만 가지고 있는 템플릿을 먼저 만들고 다른 곳에서 그 템플릿의 내용을 구현하는 것

6.프로그램 개발 과정

고객의 요구 사항 <-> 요구 사항 분석 <-> 설계 <-> 구현 <-> 테스트 <-> 배포 <-> 유지보수

고객이 어떤 요구 사항을 제시하면 분석가는 그 문제를 파악을 해서 고객에게 다시 확인을 해야 합니다.
고객의 요구사항을 처음부터 구현해서 보여줄 수는 없습니다.
고객의 요구사항이 맞는지 확인하기 위해서 모양만 먼저 만들어서 제시합니다. - 헤더 파일이나 인터페이스

고객의 요구사항이 전부 반영이 되었으면 이 때 구현을 합니다.

인터페이스의 다른 이름이 protocol(규칙, 규약, 약속) 입니다.

인터페이스가 이해가 안되면 식당의 메뉴판을 떠올리면 됩니다.

7.인터페이스 끼리 상속이 가능
=>implements 대신에 extends 를 사용

8.default method
=>인터페이스에는 내용이 있는 메소드가 있으면 안되는데 결과 자료형 앞에 default 를 붙이면 내용을 작성해도 됩니다.




