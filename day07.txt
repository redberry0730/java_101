**클래스
1.클래스 와 인스턴스
1)클래스
=>인스턴스들이 공통으로 가져야 하는 데이터 와 메소드의 모임
=>사용자 정의 자료형

2)인스턴스
=>클래스를 기반으로 만들어진 객체

2.Property
=>클래스 안에 만든 변수
1)Property
=>클래스 안에 선언하고 인스턴스가 할당 받아서 사용하는 변수

2)Static Property
=>클래스 안에 static 과 함께 선언하고 클래스에 만들어져서 클래스 와 인스턴스가 같이 사용는 변수
=>만드는 목적은 인스턴스들 사이의 데이터 공유가 목적

3)Property는 처음에 값을 할당하지 않으면 기본값으로 설정됩니다.
=>기본값은 숫자는 0, boolean 은 false, 나머지는 null 로 설정됩니다.

3.접근 지정자
=>자바에서는 class, propery, method에 붙일 수 있습니다.
1)private: 클래스 내부에서만 사용할 수 있도록 합니다.
=>인스턴스를 가지고 접근 할 필요가 없는 경우에 설정

2)default(package): 접근 지정자를 작성하지 않는 것으로 package 내부에서는 public 이 되고 package 외부에서는 private 이 됩니다.

3)protected: package 내에서는 public 이 되고 package 외부에서는 클래스 내부 와 상속 받은 클래스 내부에서 사용이 가능합니다.

4)public: 클래스 내부에서 사용할 수 있고 인스턴스(클래스 외부)도 사용할 수 있습니다.

4.Method
=>독립적으로 메모리를 할당받아서 수행되는 코드의 모임
=>자바에서는 이 Method 가 반드시 클래스 안에 만들어 져야 합니다.
Method 가 클래스 안에 존재하지 않고 클래스 외부에 존재하면 Function 이라고 합니다.
=>프로그래밍을 처음 공부하거나 어렵다고 느껴지면 생성부분은 패스를 하고 호출하는 방법에 대해서 먼저 학습하는것이 좋습니다.
1)생성
접근지정자 + [특성] + 리턴 타입 + 메소드 이름 + (매개변수자료형 매개변수이름, ....){
	메소드 내용
	[return 데이터]
}

=>접근 지정자는 이전에 배운것과 동일
=>특성
static: 클래스가 호출할 수 있는(인스턴스를 이용하지 않고) 메소드

abstract: 내용이 없는 이름만 존재하는 메소드
final: 재정의 할 수 없는 메소드

synchronized: 동시에 수행할 수 없도록 하는 메소드

native: 운영체제의 메소드를 직접 호출하는 메소드

=>리턴 타입은 메소드의 수행이 종료되고 넘겨주는 데이터
데이터를 남겨주지 않는 경우에는 void 라고 작성해야 합니다.
void 경우는 메소드의 내용에 return 이 없어도 됩니다.
void 가 아니면 반드시 return 데이터 를 맨 마지막에 수행되도록 해야 합니다.

=>매개변수는 메소드를 호출할 때 넘겨주어야 하는 데이터로 메소드 내의 지역 변수가 됩니다.

2)메소드 호출
=>클래스 내부에서는 메소드이름(매개변수 나열)
=>클래스 외부에서는 클래스이름 또는 인스턴스이름.메소드이름(매개변수 나열)
=>static 메소드는 클래스 이름으로 호출하고 static이 없는 메소드는 인스턴스 이름으로 호출
=>메소드에 매개변수가 있으면 매개변수 개수만큼 동일한 자료형으로 데이터를 대입해서 호출
=>메소드에 리턴 타입이 있으면 메소드의 수행 결과를 재사용할 수 있습니다.

3)method overloading
=>하나의 클래스에 매개변수의 개수나 자료형을 다르게 하고 메소드 이름이 같은 경우
=>하나의 클래스에 동일한 이름의 메소드가 2개 이상 존재하는 것

4)call by value & call by reference
=>call by value: 매개변수의 자료형이 기본형인 경우(boolean, byte, short, char, int, long, float, double)로 메소드를 호출할 때 넘겨준 데이터를 메소드 내부에서 변경해도 원본 데이터에는 영향이 없습니다.

=>call by reference: 매개변수의 자료형이 기본형이 아닌 경우로 메소드를 호출할 때 넘겨준 데이터를 메소드 내부에서 변경하면 원본 데이터도 변경이 됩니다.

=>메소드의 매개변수가 기본형이 아닌데 메소드의 리턴 타입이 void 이면 매개변수로 대입한 데이터를 변경할 수 도 있습니다.

5. 키보드 입력
=>java.util.Scanner를 이용할 수 있습니다.
System.in을 생성자에 대입해서 Scanner 클래스의 인스턴스를 생성

=>정수는 Scanner객체.nextInt()
=>실수는 Scanner객체.nextDouble()
=>Boolean은 Scanner객체.nextBoolean()
=>문자열은 Scanner객체.nextLine()
=>숫자 다음에 문자열을 입력받을 때는 Enter를 제거하기 위해서 Scanner객체.nextLine() 를 먼저 호출해야 합니다.








