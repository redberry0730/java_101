**Arrays 
1. 동적으로 배열의 데이터 정렬하기
=>1을 누르면 이름의 오름차순 2를 누르면 이름의 내림차순 3을 누르면 score의 오름차순 4를 누르면 score의 내림차순 정렬을 하도록 작성

1)프로젝트를 새로 만들고 이전에 만든 Student 클래스를 복사합니다.

2)main 메소드를 소유한 클래스를 만들고 main 메소드 작성
import java.util.Arrays;
import java.util.Comparator;
import java.util.Scanner;

public class DynamicSort {

	public static void main(String[] args) {
		//3개의 Student 인스턴스를 생성해서 배열에 저장
		Student st1 = new Student("크루이프", 90);
		Student st2 = new Student("반바스텐", 87);
		Student st3 = new Student("베르캄프", 97);
		
		//인스턴스 배열을 생성
		Student [] students = {st1, st2, st3};
		
		//정수를 입력받기 위한 스캐너 인스턴스 생성
		Scanner sc = new Scanner(System.in);
		//무한반복
		while(true) {
			//정수를 1개 입력
			System.out.print(
				"정수를 입력하세요(1.이름 오름차순, 2.이름 내림차순 " + 
				"3.점수 오름차순 4.점수 내림차순):");
			int menu = sc.nextInt();
			
			switch(menu) {
			case 1:
				//name 의 오름차순 정렬
				Arrays.sort(students, new Comparator<Student>() {
					@Override
					public int compare(Student o1, Student o2) {
						return o1.getName().compareTo(o2.getName());
					}
					
				});
				break;
			case 2:
				//name 의 내림차순 정렬
				Arrays.sort(students, new Comparator<Student>() {
					@Override
					public int compare(Student o1, Student o2) {
						return o2.getName().compareTo(o1.getName());
					}
				});
				break;
			case 3:
				//score 의 오름차순 정렬
				Arrays.sort(students, new Comparator<Student>() {
					@Override
					public int compare(Student o1, Student o2) {
						return o1.getScore() - o2.getScore();
					}
				});
				break;
			case 4:
				//score 의 내림차순 정렬
				Arrays.sort(students, new Comparator<Student>() {
					@Override
					public int compare(Student o1, Student o2) {
						return o2.getScore() - o1.getScore();
					}
				});
				break;
			default:
				break;
			}
			
			System.out.println(Arrays.toString(students));
			
		}
	}
}

2.데이터의 존재 여부 확인 및 위치 확인
=>검색 알고리즘
첫번째 데이터부터 마지막 데이터까지 순차적으로 검색 - 순차검색

피보나치 수열을 이용해서 피보나치 수열의 값을 확인하면서 검색 - 피보나치 검색

중앙의 데이터와 비교해서 같으면 찾은 것이고 작으면 왼쪽 크면 오른쪽으로 이동해서 반복하는 방식 - BinarySearch(이분 검색)

피보나치 검색이나 BinarySearch를 사용할 때 주의할 점은 데이터가 반드시 정렬되어 있어야 한다는 것입니다.

=>Arrays 클래스의 binarySearch(배열, 찾고자 하는 데이터)를 호출하면 이분검색을 수행해서 데이터를 찾으면 찾은 위치를 리턴하고 찾지 못하면 음수를 리턴합니다.

import java.util.Arrays;

public class SearchMain {

	public static void main(String[] args) {
		int [] ar = {100, 30, 40, 50, 70, 10, 20};
		
		//78이 있는지 확인
		int index = Arrays.binarySearch(ar, 78);
		if(index < 0) {
			System.out.println("데이터가 존재하지 않습니다.");
		}else {
			System.out.println(index + "번째 존재합니다.");
		}
		
		//10이 있는지 확인 - 데이터가 존재하는데 없다고 출력됨
		//데이터를 정렬하지 않았기 때문에 이분 검색이 제대로 동작하지 않음
		index = Arrays.binarySearch(ar, 10);
		if(index < 0) {
			System.out.println("데이터가 존재하지 않습니다.");
		}else {
			System.out.println(index + "번째 존재합니다.");
		}
		
		Arrays.sort(ar);
		index = Arrays.binarySearch(ar, 10);
		//0번째 있다고 나오는 이유는 정렬이 되면 10이 가장 작아서 가장 앞에 있음
		if(index < 0) {
			System.out.println("데이터가 존재하지 않습니다.");
		}else {
			System.out.println(index + "번째 존재합니다.");
		}

	}

}

**List
=>자바에서는 동적으로 크기 변경이 가능한 List 들의 공통된 요소를 갖는 인터페이스
=>모든 클래스들이 Generic 을 사용하고 있기 때문에 인스턴스를 생성할 때 데이터 1개의 자료형을 결정해야 합니다.
=>빠른 열거를 지원 - for(임시변수 in List객체) 사용 가능
=>공통된 메소드
add(데이터): 데이터 삽입
get(인덱스): 인덱스 번째 데이터 리턴
size(): 데이터 개수 리턴
sort(Comparator comparator)
remove(인덱스 또는 데이터)

1.ArrayList(Vector)
=>데이터를 순차적으로 중간에 빈 공간없이 저장하는 List
=>가변 배열 - 동적으로 크기가 늘어나거나 줄어듭니다.
=>LinkedList 보다 조회속도는 빠른데 중간에 삽입이나 삭제를 할 때는 데이터의 이동이 발생하기 때문에 느립니다.

2.LinkedList
=>데이터 와 다음 데이터를 가리키는 Link를 같이 저장하는 List
=>가변 배열
=>ArrayList 에 비해서 중간에 삽입이나 삭제하는 속도는 빠르지만 조회속도가 느리고 메모리가 낭비될 수 있습니다.

3.ArrayList 와 LinkedList의 속도 비교
import java.util.ArrayList;
import java.util.LinkedList;

public class ListCompare {

	public static void main(String[] args) {
		//정수를 저장하는 ArrayList 와 LinkedList 만들기
		ArrayList<Integer> al = new ArrayList<>();
		al.add(2); //데이터 삽입

		LinkedList<Integer> li = new LinkedList<>();
		li.add(2); //데이터 삽입


		long start = System.nanoTime();

		//al 의 1번째 위치에 데이터를 50000개의 데이터 삽입
		for(int i=0; i<50000; i++) {
			al.add(1, 1);
		}

		long end = System.nanoTime();
		System.out.println("ArrayList 걸린시간:" + (end-start));

		start = System.nanoTime();

		//al 의 1번째 위치에 데이터를 50000개의 데이터 삽입
		for(int i=0; i<50000; i++) {
			li.add(1, 1);
		}

		end = System.nanoTime();
		System.out.println("LinkedList 걸린시간:" + (end-start));


		//50000 개의 데이터를 읽는 시간
		start = System.nanoTime();
		for(int i=0; i<50000; i++) {
			al.get(10000);
		}
		end = System.nanoTime();
		System.out.println("ArrayList 걸린시간:" + (end-start));

		//50000 개의 데이터를 읽는 시간
		start = System.nanoTime();
		for(int i=0; i<50000; i++) {
			li.get(10000);
		}
		end = System.nanoTime();
		System.out.println("LinkedList 걸린시간:" + (end-start));
	}

}

4.ArrayList 와 LinkedList는 사용 방법이 같음
=>생성, 데이터를 추가, 데이터를 삭제, 데이터를 수정, 원하는 위치의 데이터를 가져오기, 전체 데이터를 순회, 정렬, map(데이터를 변환), filter(원하는 데이터를 추출), reduce(원하는 연산을 수행) 등의 작업을 할 수 있어야 합니다.
=>map, filter, reduce는 람다 와 스트림 API를 학습을 하면 그 부분에서 하게 됩니다.
빅데이터 처리에 가장 많이 사용되는 3가지 연산입니다.

import java.util.ArrayList;

public class ListMain {

	public static void main(String[] args) {
		//문자열 데이터를 저장할 수 있는 ArrayList 생성
		ArrayList<String> list = new ArrayList<>();
		
		//데이터를 마지막에 추가
		list.add("Framework");
		//중간에 삽입
		list.add(0, "Programming Language");
		list.add(1, "Data Structure");
		list.add(2, "Algorithm");
		list.add(3, "Database");
		
		//2번째 데이터를 삭제
		list.remove(2);
		
		//변경 - 기존 데이터를 삭제하고 그 위치에 추가
		list.remove(1);
		list.add(1, "자료 구조");
		
		//전체 데이터 출력 - 빠른 열거 이용
		/*
		for(String study: list) {
			System.out.println(study);
		}
		*/
		
		//인덱스를 이용해서 순서대로 접근
		for(int i=0; i<list.size(); i++) {
			System.out.println(list.get(i));
		}

	}

}

5.Stack
=>Last In First Out 형태로 동작하는 자료구조 : 마지막에 삽입된 데이터가 가장 먼저 삭제됩니다.
=>복귀 주소 저장 이나 함수가 호출되서 메모리를 할당 받을 때 Stack 구조로 할당을 받습니다.
=>Generic 을 이용할 수 있음
=>데이터를 삽입: void push(데이터)
=>데이터를 삭제: 데이터 pop() - 삭제하는 데이터를 리턴
=>데이터를 삭제하지 않고 마지막 데이터를 리턴하는 메소드: 데이터 peek()

		//문자열을 저장하는 Stack 인스턴스를 생성
		Stack<String> stack = new Stack<>();
		
		//데이터 삽입
		stack.push("Java");
		stack.push("JavaScript");
		stack.push("Python");
		
		//하나의 데이터를 꺼내서 출력
		System.out.println(stack.pop());
		
		System.out.println(stack);
		
		for(String language : stack) {
			System.out.println(language);
		}
		

6.Queue
=>First In First Out 구조로 동작하는 자료구조
먼저 삽입된 데이터가 먼저 삭제됩니다.
=>이 자료구조는 스케쥴링(실행순서 결정)에 이용 : 공장 자동화 같은 곳에 중요한 자료구조
=>자바에서는 Queue 가 인터페이스
Queue를 구현한 클래스를 이용해서 인스턴스를 생성해야 합니다.
삽입: offer(데이터)
삭제: poll() - 첫번째 데이터를 삭제하고 리턴
삭제하지 않고 첫번째 데이터 가져오는 메소드: peek()
=>Queue를 구현한 대표적인 클래스가 ArrayList 와 LinkedList 입니다.

7. PriorityQueue(우선 순위 큐)
=>데이터를 저장할 때 크기 비교를 해서 저장을 합니다.
poll을 하면 크기 순서대로 리턴되지만 실제 저장은 크기 순서대로 되어 있지 않습니다.
빠른 열거를 이용하면 poll 의 순서와 다르게 나올 수 있음

8.Deque
=>양쪽에서 삽입과 삭제가 가능한 자료구조
수직이나 수평 방향에서 보면 Stack 과 Queue의 결합
=>일반적인 프로그래밍에서는 구현하는 경우가 드물고 스마트 폰에서 스크롤 되는 View에 구현되어 있습니다.

9.Set
=>데이터의 중복을 허용하지 않고 순서와 상관없이 저장하는 자료구조
=>해싱을 이용해서 데이터를 저장합니다.
데이터가 어떤 순서대로 저장되었는지 알 지 못함
=>빠른 열거로만 데이터를 사용할 수 있습니다.
다른 언어에서는 First 나 Last 라는 속성 또는 메소드를 이용해서 내부 데이터에 접근하기도 합니다.
=>Set 은 인터페이스
=>Set 을 구현한 클래스는 HashSet(저장 순서를 알 수 없습니다.), LinkedHashSet(저장 순서를 기억), TreeSet(크기를 기억)
=>Hashing: 데이터를 저장할 때 저장 위치를 결정하기 위한 함수
데이터를 빠르게 조회할 수 있습니다.

import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.TreeSet;

public class SetMain {

	public static void main(String[] args) {
		//정수를 저장하는 HashSet을 생성 - 삽입 순서 와 상관없이 저장
		//HashSet<Integer> set = new HashSet<>();
		
		//삽입하는 순서를 기억하는 Set
		//LinkedHashSet<Integer> set = new LinkedHashSet<>();
		
		//데이터의 크기를 기억하는 Set
		TreeSet<Integer> set = new TreeSet<>();
		
		//데이터 추가
		set.add(10);
		set.add(30);
		set.add(8);
		set.add(15);
		//이전에 저장한 데이터이므로 추가가 안됩니다.
		set.add(30);
		
		//빠른 열거로 데이터를 조회
		for(Integer i : set) {
			System.out.println(i);
		}
		
		//로또 번호 6개를 저장
		//배열, ArrayList, LinkedList, Stack, HashSet, LinkedHashSet
		//TreeSet
		//숫자는 랜덤하게 입력되고 중복되는 값을 입력할 수 도 있습니다.
		//TreeSet을 사용하는 것이 제일 효율적입니다.
		
		//1-45 사이의 숫자 6개를 입력받아서 저장한 후 출력

	}

}




