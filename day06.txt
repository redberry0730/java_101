** 배열
=>동일한 자료형의 연속적인 모임

1.배열을 생성
1)데이터1개의 자료형 [ ] 배열이름 = new 자료형[개수]; 
//기본값을 가지고 개수만큼의 배열을 생성
//숫자 데이터는 0, boolean 은 false 그 이외의 자료형은 null(가리키는 데이터가 없음)

2)데이터1개의 자료형 [ ] 배열이름 = {데이터 나열};
//초기 데이터를 가지고 생성

2.배열의 데이터 사용
배열이름.length : 데이터 개수를 리턴

배열이름[인덱스] : 인덱스 번째 데이터를 가져옴, 인덱스는 0부터 시작하고 length-1까지 입니다.

3.배열의 전체 데이터 순회
1)인덱스를 이용하는 방식
int size = 배열이름.length;
for(int ? = 0; ? < size; ?++){
	배열이름[?]
}

2)빠른 열거를 이용하는 방식
for(자료형 임시변수 : 배열이름){
	임시변수
}
=>배열의 모든 데이터가 임시변수에 순서대로 하나씩 대입

4.다차원 배열
=>배열의 배열로 배열의 차원이 여러 개
[ ][ ]: 2차원 배열 - matrix
[ ][ ][ ]: 3차원 배열 - 2차원 배열의 배열

int [ ][ ] ar = new int[행의 개수][열의 개수];
int [ ][ ] ar = {{데이터 나열}, {데이터 나열}...};

=>데이터 접근: ar[행인덱스][열인덱스]

**객체 지향 프로그래밍
1.객체 지향의 3대 특징
1)Encapsulation(캡슐화)
=>동일한 목적을 갖는 프로퍼티(변수) 와 메소드의 집합을 하나로 만들어서 사용
=>불필요한 부분은 숨기고 필요한 부분만 외부로 노출
=>클래스 와 인스턴스

2)Inheritance(상속)
=>상위 클래스의 모든 것을 하위 클래스가 물려받는 것
=>재사용성을 증가

3)Polymorphism(다형성)
=>동일한 메시지가 다르게 반응하는 성질
=>동일한 코드가 대입된 인스턴스에 따라 다른 메소드를 호출하는 것

2.클래스 와 인스턴스
1)객체(Object)
=>존재하는 모든 것

2)Class
=>사용자 정의 자료형: 사용자가 만드는 자료형
=>동일한 목적을 갖는 프로퍼티 와 메소드를 묶어놓은 것
=>정적 - 한 번 만들면 변경이 안됨

3)Instance
=>Class를 기반으로 만들어진 객체
=>동적 - 만들고 난 후 삭제할 수 도 있고 내부 데이터를 변경할 수 있습니다.

3.클래스의 구성 요소
1)property: 데이터를 저장하기 위한 변수

2)method: 독립적으로 메모리를 할당받아 수행하는 코드의 모임

3)constructor(생성자): 인스턴스를 만들기 위해서 호출하는 메소드

4.클래스 생성
[접근 지정자] + [클래스의 특성] + class + 클래스이름 + [extends 상위 클래스 이름] + [implements 인터페이스 이름 나열]{
	필요한 내용 정의
}

1)접근 지정자
private: 클래스 안에 존재하는 클래스에서만 사용 가능한 것으로 클래스 내부에서만 사용할 수 있도록 합니다.

default: 현재 패키지 내에서는 사용이 가능하고 다른 패키지에서는 사용을 못하도록 설정

protected: 클래스 안에 존재하는 클래스에서만 사용 가능한 것으로 클래스 내부 와 상속받은 클래스에서 사용이 가능

public: 모든 곳에서 사용 가능한 클래스

2)클래스 특성
abstract: 추상 클래스, 상속을 통해서만 사용할 수 있는 클래스

final: 상속을 할 수 없는 클래스

static: 클래스 내부에 클래스를 만들었을 때 클래스 안에 static 멤버를 가진 경우 지정

5.인스턴스(객체) 생성
new 생성자(매개변수 나열)
=>메모리를 할당하고 메모리의 참조를 리턴
=>인스턴스를 만들고 재사용을 하고자 할 때는 
클래스이름 변수명 = new 생성자(매개변수 나열);
=>생성자의 이름은 클래스 이름 과 같기 때문에 생성자 대신에 클래스이름이라고 하는 경우도 있습니다.

6.property(속성)
=>클래스 안에 만든 변수
1)지역변수(Local Variable)
=>메소드 안에 만든 변수
=>메소드가 호출되서 수행이 종료되면 자동으로 소멸

2)Property
=>클래스 안 메소드 바깥에 만들어진 변수

3)종류
static 이 없는 프로퍼티: 인스턴스가 소유해서 인스턴스의 특성을 나타내기 위한 변수, 인스턴스를 만들 때 마다 생성

static 이 있는 프로퍼티: 클래스가 소유하는 변수로 1개만 생성

4)생성 방법
[접근 지정자] + [static] + 자료형 + 프로퍼티이름 [ = 기본값] ;
=>접근 지정자
private: 클래스 내부에서만 사용이 가능

default(package): 접근 지정자를 생략하는 것으로 패키지 내에서는 public 이 되고 패키지 외부에서는 private 이 됩니다.

protected: 클래스 내부와 상속받은 클래스에서 사용 가능하고 같은 패키지 내에서는 public

public: 클래스 내부와 인스턴스가 사용 가능

5)static
=>클래스가 접근 가능한 프로퍼티를 만들 때 사용
=>1개만 생성
=>클래스 이름으로 접근 가능하고 자바에서는 인스턴스를 이용해서도 접근 가능
=>만드는 목적은 동일한 클래스로부터 만들어진 모든 인스턴스가 공유하기 위해서 생성

6)클래스를 만드는 이유
=>배열은 동일한 자료형의 모임으로 테이블을 만들면 열이 배열입니다.
=>테이블에서 행을 만들고자 하는 경우 여러 개의 정보를 합쳐서 하나의 정보를 만들고자 하는 경우 클래스를 사용합니다.
=>테이블 구조는 클래스나 Map 의 배열 또는 List












 