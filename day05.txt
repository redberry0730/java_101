**제어문(Control Statement)
Looping: 조건이 true 인 동안 반복을 수행

Iteration(순회): 데이터의 모임을 순서대로 하나씩 접근

1.while
=>반복을 수행하는 명령어
while(boolean 표현식: 결과가 true 아니면 false가 되는 표현식 - 변수, 상수, 리터럴, 연산식, 메소드 호출 구문){
	표현식이 true 인 동안 반복할 내용
}

2.do ~ while
do{
	반복할 내용;
}while(boolean 표현식);
=>조건을 확인하는 while이 뒤에 있기 때문에 무조건 1번은 반복할 내용을 수행

3.for
=>요즈음은 가장 많이 사용
for(처음 한 번 만 수행할 내용 - 변수 초기화 작업; 조건; 두번째부터 수행할 내용){
	조건이 false 가 아니면 수행할 내용;
}

4.제어문의 중첩
=>제어문 안에 제어문을 작성할 수 있습니다.
=>바깥쪽 제어문에서 시작해서 안쪽 제어문을 전부 수행하고 바깥쪽 제어문을 수행합니다.
=>if 나 switch 안에 while, do~while, for 와 같은 반복문을 작성할 수 도 있고 반복문 안에 반복문 또는 if 나 switch를 작성할 수 있습니다.

5.break 와 continue
1)break
=>switch 안에서 switch 구문을 중단하는 용도로 사용할 수 있습니다.
=>반복문 안에서 if 와 함께 사용해서 반복문을 중단할 수 있습니다.

2)continue
=>반복문 안에서 if 와 함께 사용해서 아래 문장을 수행하지 않고 다음 반복으로 진행합니다.

**배열
=>동일한 형태를 가진 데이터의 모임
=>데이터를 연속적으로 저장합니다.
=>제한이 없기는 하지만 각각의 데이터는 비교가 가능해야 합니다.

1번의 나이(정수)와 2번의 나이(정수): 배열로 만듭니다.

1번의 나이(정수) 와 1번의 몸무게(정수): 배열로 만들지 않음, 나이와 몸무게는 서로 다른 의미를 갖는 데이터이기 때문에 서로 비교하지 않습니다.
이런 데이터는 형태가 같아도 배열로 만들지 않습니다.

1.배열을 만드는 이유
1)이름의 개수를 줄이기 위해서
100개의 정수를 저장할려면 100개의 이름이 필요한데 배열을 이용하면 하나의 이름으로 100개의 정수를 저장하고 이름을 붙일 수 있습니다.

2)여러 개의 데이터를 반복문을 이용해서 사용하기 위해서로 코드의 길이가 짧아지고 유지보수가 편리해집니다.

2.배열을 생성
1)생성 과 동시에 초기화
데이터1개의자료형 [ ] 배열이름 = {데이터 나열};

2)생성을 하고 기본값으로 초기화
데이터1개의자료형 [ ] 배열이름 = new 자료형[개수];
=>모든 데이터가 기본값으로 채워집니다.
기본값은 boolean 이면 false 숫자 이면 0 또는 0.0
그 이외의 자료형은 null

3.배열은 참조형입니다.
=>배열의 이름은 실제 데이터를 저장하고 있는 곳을 대표하는 이름입니다.
배열의 이름만 가지고는 배열의 데이터에 직접 접근할 수 없습니다.
여러 개의 데이터를 가진 참조형들은 [인덱스] 또는 .이름 을 이용해서 실제 데이터에 접근합니다.

4.배열의 데이터 접근
1)배열의 데이터 개수: 배열이름.length

2)배열 안의 데이터 1개 접근: 배열이름[인덱스]
인덱스는 0부터 .length-1 까지

3)실행 중 발생하는 에러 
NullPointerException: 참조형의 데이터를 만들지 않고 세부 데이터에 접근할 때 발생 - 이름만 만든 경우입니다.

ArrayIndexOutOfBoundsException: 인덱스의 범위가 잘못된 경우
음수를 사용하던가 데이터의 개수보다 크거나 같은 숫자를 사용한 경우입니다.

**간단한 코딩 연습
구글에서 더블릿 검색
www.dovelet.com 입니다.


 


















