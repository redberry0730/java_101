**String 의 Encoding
=>문자를 숫자로 변환해서 컴퓨터의 메모리 저장하는 것
=>숫자를 출력하기 위해서 문자로 변환하는 것을 Decoding 이라고 합니다.
인코딩 방식 과 디코딩 방식이 맞지 않으면 문자를 제대로 해석할 수 없습니다.
영문 과 숫자 키보드 자판에 나와있는 특수문자는 제외 - 이 문자들은 모든 인코딩 방식에서 동일한 숫자로 변경되기 때문입니다.
=>한글의 경우는 윈도우즈에서 사용하는 MS949(CP949 라고도 함) 그리고 예전 웹에서 사용하던 EUC-KR 그리고 지금 거의 모든 곳에서 사용하는 UTF-8

=>URL은 반드시 인코딩해서 설정해야 합니다. 

1.인코딩 과 디코딩
=>문자열을 인코딩 된 바이트 배열로 변환
문자열.getBytes(String 인코딩방식) 를 호출하면 byte 배열로 리턴됨

=>바이트 배열을 가지고 문자열을 생성
new String(byte[] bytes, String 인코딩방식)

=>파일 입출력을 공부하기 전에 반드시 학습

2.URL을 인코딩
java.net.URLEncoder.encode(String url, String 인코딩방식)

=>네트워크 사용하기 전에 반드시 학습


import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;

public class StringEncoding {

	public static void main(String[] args) {
		String msg = "안녕하세요";
		String url = "https://www.google.co.kr/수지";
		
		//문자열을 인코딩 된 byte 배열로 변환
		try {
			byte [] bytes = msg.getBytes("UTF-8");
			//복원
			msg = new String(bytes, "UTF-8");
			System.out.println(msg);
		
			//URL을 인코딩
			String encodedUrl = URLEncoder.encode(url, "UTF-8");
			System.out.println(encodedUrl);
		} catch (UnsupportedEncodingException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

	}

}

3.StringBuilder
=>변할 수 있는 문자열을 저장하는 클래스
=>매개변수가 없는 생성자나 String을 대입받는 생성자를 이용해서 인스턴스를 생성
=>데이터를 추가하는 것은 append 메소드를 사용 - 복사작업을 하지 않음
=>String 으로 변환할 때는 toString 메소드를 이용합니다.
=>잘 사용하지 않고 아주 큰 텍스트 파일에서 문자열을 chunk(나누어서 읽기) 할 때 웹 에서 아주 긴 문자열을 다운로드 받을 때 사용합니다.

**빠른 열거
=>데이터의 모임을 순차적으로 빠르게 접근하기 위해 제공하는 API
for(임시변수 : 데이터의모임){
	//임시변수를 이용해서 데이터의 모임의 모든 데이터를 순차적으로 접근
}

=>데이터의 모임은 배열, List, Set 등 입니다.

**Generics
=>데이터의 자료형을 미리 결정하지 않고 인스턴스를 생성할 때 결정하는 것
=>동일한 알고리즘을 사용하는 로직에서 매개변수의 자료형 때문에 여러 개를 구현하는 번거러움을 없애기 위해서 도입
=>클래스를 만들 때는 임시 자료형을 생성해서 사용하고 인스턴스를 만들 때 실제 자료형을 대입해서 생성하는 것

class 클래스이름 <미지정 자료형 나열...>{

	미지정 자료형을 사용

}

//미지정 자료형을 실제 자료형으로 확정
클래스이름<실제 자료형 나열> 변수명 = new 생성자이름<>();

=>인스턴스를 만들 때 <실제 자료형 나열> 을 생략하면 경고가 발생합니다.
리턴되는 모든 데이터는 Object 타입이 되서 강제 형 변환을 해서 사용해야 합니다.

=>자료구조 클래스가 Generics 를 이용합니다.

**enum(열거형 상수, 나열형 상수)
=>자바에서는 클래스로 취급
=>한 묶음으로 사용되는 상수를 모아놓은 것
=>옵션을 만들려고 할 때 옵션은 제한적으로 입력받아야 합니다.
성별 - 성별은 남 과 여 만 존재 - boolen으로 생성
직업 - 학생, 회사원, 자영업 3가지가 존재 - int
학생은 0, 회사원 1, 자영업 2 로 설정

int job = 0 이나 1이나 2를 대입하면 좋은데 3 이나 4도 대입이 됩니다.

1.생성
enum 이름{
	상수이름을 나열;
}

2.변수 생성
이름 변수명 = 이름.상수이름 으로 만 대입 가능 
다른 데이터를 삽입하면 에러

**Annotation
=>@로 시작하는 문자열
=>자주 사용하는 기능을 대신 수행해주는 역할을 합니다.
@Override 는 이 메소드가 Overriding 된 메소드인지 확인하고 그렇지 않으면 에러를 발생
=>java framework 을 공부하게 되면 어노테이션이 개발자 대신에 많은 일들을 대신 해줍니다.

**java.util 패키지
=>자료구조 클래스 와 여러 유틸(날짜 관련 클래스, Random, Scanner) 클래스 들을 포함한 패키지
=>lang 패키지 와 함께 가장 많이 사용되는 패키지 입니다.

1.Data Structure(자료 구조)
=>여러 개의 데이터를 어떻게 저장해서 사용할 것인가 하는 것
=>Array(배열), ArrayList, LinkedList(연결 리스트), Stack, Queue, Deque, Tree, Graph, Set. Map(Dictionary, HashTable) 등

2.List 계열에서 수행해봐야 하는 알고리즘
=>정렬 - 데이터를 나열하는 것
=>검색 - 원하는 데이터의 존재 여부 와 위치
=>전체 데이터에 연산을 해서 변환하는 것(Map), 전체 데이터에서 원하는 데이터를 추출하는 것(Filtering), 데이터들을 가지고 집계를 구하는 것(Reduce)
=>여러 개의 모임을 합쳐서 하나로 만드는 것

3.Arrays 클래스
=>배열에 작업을 수행하는 클래스
=>모든 멤버가 static 이라서 인스턴스 생성을 할 필요가 없음
1)copyOf(복사할 배열, 데이터 개수): 배열에서 개수만큼 복사해서 새로운 배열을 리턴
2)toString(배열): 배열의 모든 요소들에 toString 을 호출해서 그 결과를 하나의 문자열로 만들고 리턴

3)정렬
=>sort(배열), sort(배열, Comparator comparator)
=>정렬을 할 때는 크기 비교가 가능해야 합니다.
=>숫자 데이터는 정렬이 됩니다.
=>자바에서는 Compable 인터페이스를 implements 해서 compare 라는 메소드를 재정의하면 이 메소드의 결과를 가지고 정렬을 수행합니다.
이 메소드의 결과가 양수를 리턴하면 앞의 데이터가 크다고 판정하고 자리를 바꾸고 0이면 같다고 생각하고 음수를 리턴하면 앞의 데이터가 작다고 판정해서 자리를 바꾸지 않습니다.
=>String 클래스는 Comparable 인터페이스를 implements 했기 때문에 이 메소드를 이용해서 크기 비교를 하고 정렬을 수행한 것입니다.

=>데이터를 표현하기 위한 클래스 생성

public class Student {
	private String name;
	private int score;
	
	public Student() {
		super();
		// TODO Auto-generated constructor stub
	}
	public Student(String name, int score) {
		super();
		this.name = name;
		this.score = score;
	}
	public String getName() {
		return name;
	}
	public void setName(String name) {
		this.name = name;
	}
	public int getScore() {
		return score;
	}
	public void setScore(int score) {
		this.score = score;
	}
	
	@Override
	public String toString() {
		return "Student [name=" + name + ", score=" + score + "]";
	}
	
	
}

=>Main 클래스의 main 메소드 작성
실행하면 에러
import java.util.Arrays;

public class ArraysMain {

	public static void main(String[] args) {
		int [] scores = {93, 98, 77, 86, 79};
		String [] names = {"해글러", "레너드", "헌즈", "두란", "타이슨"};
		
		//scores 의 toString 이 호출되서 클래스 이름 과 해시코드가 출력
		System.out.println(scores);
		//Arrays.toString 을 이용하면 데이터 각각의 toString을 호출
		System.out.println(Arrays.toString(scores));
		
		//scores 정렬
		Arrays.sort(scores);
		System.out.println(Arrays.toString(scores));
		
		Arrays.sort(names);
		System.out.println(Arrays.toString(names));
		
		Student st1 = new Student("크루이프", 90);
		Student st2 = new Student("반바스텐", 87);
		Student st3 = new Student("베르캄프", 97);
		
		//인스턴스 배열을 생성
		Student [] students = {st1, st2, st3};
		//출력
		System.out.println(Arrays.toString(students));
		//정렬 
		Arrays.sort(students);
		System.out.println(Arrays.toString(students));
		
	}

}

=>에러를 해결하기 위해서는 정렬을 할려는 배열의 데이터는 Comparable 인터페이스를 implements 해야 합니다.
=>자바에서는 2가지 방법으로 이 문제를 해결
=>정렬을 수행할 배열의 데이터 클래스에 Comparable 인터페이스를 implements 해서 compare 메소드를 재정의 해주는 것입니다.

Student 클래스에 Comparable 인터페이스를 implements
 public class Student implements Comparable


Student 클래스에 compareTo 메소드 재정의
	@Override
	public int compareTo(Object o) {
		Student other = (Student)o;
		//기준 데이터의 score 에서 매개변수의 score 뺀 값을 리턴 : 오름차순 정렬
		//return this.score - other.score;
		
		//score 의 내림차순 정렬
		//return other.score - this.score;
		
		//name의 오름차순 정렬
		//문자열은 Comparable 인터페이스가 구현되어 있으므로 compareTo로 비교
		return this.name.compareTo(other.name);
	} 



