**IO
1.ByteStream
=>바이트 단위로 데이터를 주고 받는 스트림
=>모든 경우에 사용 가능
1)InputStream & OutputStream
=>추상 클래스: 직접 인스턴스 생성을 못함
=>입력 과 출력에 관련된 공통된 메소드만 소유
=>InputStream 의 메소드
int available(): 읽을 수 있는 바이트 수 리턴
void close(): 스트림을 닫는 메소드
abstract int read(): 하나의 바이트를 읽고 읽은 바이트를 리턴, 실패하면 -1을 리턴

abstract int read(byte [] b): 바이트를 읽어서 b에 저장하고 읽은 바이트 수를 리턴, 0보다 작거나 같은 숫자가 리턴되면 전부 읽은 것입니다.

abstract int read(byte [] b, int off, int len): off 부터 len만큼 바이트를 읽어서 b에 저장하고 읽은 개수를 리턴, 0보다 작거나 같은 수를 리턴하면 전부 읽은 것입니다.

long skip(long n): n byte 만큼 읽지 않고 건너뜀

=>OutputStream 의 메소드
void close(): 스트림을 닫는 메소드
void write(byte [] b): 출력 스트림에 기록
void write(byte [] b, int off, int len): b 의 내용 중에서 off 부터 len만큼 기록
void write(int b): b 를 기록
void flush(): 버퍼의 내용을 전부 기록합니다.

2)FileInputStream & FileOutputStream
=>파일의 내용을 읽거나 기록하기 위한 스트림
=>FileInputStream
FileInputStream(String name)
FileInputStream(File file)
File이 존재하지 않으면 FileNotFoundException이 발생

=>FileOutputStream
FileOutputStream(String name): 새로 기록
FileOutputStream(String name, boolean append): append 에 true를 대입하면 파일에 추가
FileOutputStream(File file)
FileOutputStream(File file, boolean append)
File이 존재하지 않으면 새로 생성

=>파일 입출력은 반드시 예외 처리를 해야 합니다.
자바 스크립트 나 파이썬을 할 때 도 반드시 해주어야 합니다.
자바 스크립트 나 파이썬에서는 대부분 예외처리를 잘 하지 않습니다.
파일 입출력, 데이터베이스 사용, 네트워크 사용 하는 부분은 반드시 예외처리를 해야 합니다.

3)파일에 바이트 단위로 기록
import java.io.FileOutputStream;
import java.io.IOException;

public class FileByteWriteMain {

	public static void main(String[] args) {
		//예외가 발생할 가능성이 있는 코드
		
		//출력할 파일 스트림을 생성
		FileOutputStream fos = null;
		try {
			//출력할 파일을 생성
			//윈도우즈의 절대 경로를 이용
			//fos = new FileOutputStream("c:\\file\\hello.txt");
			
			//상대 경로를 이용해서 저장
			//현재 디렉토리는 프로젝트 디렉토리
			fos = new FileOutputStream("./hello.txt");
			
			//기록할 데이터 생성
			String msg = "ByteStream 실습";
			//기록
			fos.write(msg.getBytes());
		}
		//예외가 발생하면 수행할 코드
		catch(Exception e) {
			System.out.println("파일 처리 중 예외 발생");
			//이 메시지는 개발자가 보는 메시지
			//사용자에게 보여지면 안됩니다.
			//제작이 끝나고 완성이 되면 이 라인은 삭제해야 합니다.
			System.out.println(e.getLocalizedMessage());
		}
		//무조건 수행하는 코드
		finally {
			if(fos != null) {
				try {
					fos.close();
				} catch (IOException e) {
					e.printStackTrace();
				}
			}
		}

	}

}


4)파일에서 바이트 단위로 읽어오기
import java.io.FileInputStream;
import java.io.IOException;

public class FileByteReadMain {

	public static void main(String[] args) {
		
		//파일의 내용을 바이트 단위로 읽기 위한 스트림
		FileInputStream fis = null;
		
		try {
			//파일 읽기 객체를 생성
			fis = new FileInputStream("./hello.txt");
			
			//무한 반복
			while(true) {
				//읽은 데이터를 저장할 배열 생성
				byte [] b = new byte[256];
				
				//읽어 내기
				int len = fis.read(b);
				
				//읽은 데이터가 없으면 종료
				if(len <= 0) {
					break;
				}
				
				//읽은 내용을 사용
				//시작하는 위치는 처음부터 데이터 개수는 읽은 개수만큼
				String msg = new String(b, 0, len);
				System.out.println(msg);
			}
			
		}catch(Exception e) {
			System.out.println("파일 읽기 실패");
			System.out.println(e.getLocalizedMessage());
		}finally {
			if(fis != null) {
				try {
					fis.close();
				} catch (IOException e) {
					e.printStackTrace();
				}
			}
		}

	}

}

2.입출력할 때 버퍼를 사용해야 하는 이유
=>CPU 와 입출력 장치가 실시간으로 동기화해서 작업을 한다면 CPU는 속도가 빨라서 입출력 장치를 기다리게 되서 자원의 낭비가 발생합니다.
입출력을 할 때는 운영체제의 메소드(native method)를 호출하는데 너무 자주 호출하면 운영체제의 효율이 떨어지게 됩니다.
이런 경우에는 입출력할 내용을 한 곳에서 일정한 시간이나 용량 단위로 모아서 처리해야 하는데 이 모으는 곳을 버퍼라고 합니다.
버퍼를 사용하게 되면 입출력 효율이 우수해집니다.

3.BufferedInputStream & PrintStream
=>버퍼를 이용하는 바이트 스트림
=>생성자의 매개변수는 InputStream 과 OutputStream 으로 부터 상속받은 클래스의 인스턴스입니다.
=>메소드는 동일하게 사용
=>PrintStream 에서는 출력을 할 때 print 메소드를 사용하는 것이 가능

import java.io.BufferedInputStream;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.PrintStream;

public class BufferStreamUse {

	public static void main(String[] args) {
		//버퍼를 이용해서 기록
		PrintStream ps = null;
		try {
			//파일에 바이트 단위로 기록하는 인스턴스 생성
			ps = new PrintStream("./ps.txt");
			ps.println("버퍼를 이용한 기록");
			//출력을 할 때는 버퍼에 내용이 남아 있을 수도 있으므로
			//flush를 호출해서 버퍼의 내용을 전부 기록해버리는 것이 좋습니다.
			ps.flush();
			
		}catch(Exception e) {
			System.out.println("파일 기록 실패");
			System.out.println(e.getLocalizedMessage());
		}finally {
			if(ps != null) {
				ps.close();
			}
		}
		
		//버퍼를 이용해서 읽기
		BufferedInputStream bis = null;
		try {
			bis = new BufferedInputStream(
					new FileInputStream("./ps.txt"));
			
			while(true) {
				byte [] b = new byte[128];
				int len = bis.read(b);
				if(len <= 0) {
					break;
				}
				String msg = new String(b, 0, len);
				System.out.println(msg);
			}
			
		}catch(Exception e) {
			System.out.println("파일 읽기 실패");
			System.out.println(e.getLocalizedMessage());
		}finally {
			if(bis != null) {
				try {
					bis.close();
				} catch (IOException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			}
		}

	}

}

4.Character Stream
=>문자 단위로 읽고 기록하는 스트림
=>텍스트 데이터에서만 사용 가능
1)Reader & Writer 클래스
=>추상 클래스
=>다른 클래스들이 사용할 메소드만 선언해두었습니다.
=>Reader 의 메소드
void close()
int read(): 한글자 읽어서 정수로 리턴, 읽지 못하면 음수를 리턴
int read(char [] buf): buf 에 저장하고 읽은 개수를 리턴
int read(char [] buf, int off, int len): off부터 len 만큼 읽어서 buf에 저장 

=>Writer 클래스의 메소드
void close()
void write(String str)
void write(String str, int off, int len)
void flush(): 버퍼의 내용을 전부 출력하는 메소드

2)FileReader & FileWriter
=>파일에서 읽어오고 기록하는 클래스

3)BufferedReader & PrintWriter
=>버퍼를 이용해서 읽고 쓸 수 있습니다.
=>BufferedReader 에는 readLine() 이라는 메소드가 있어서 줄 단위로 내용을 읽을 수 있습니다.
읽은 데이터가 없으면 null을 리턴합니다.
=>네트워크에서 문자열을 읽을 때도 BufferedReader를 사용합니다.
InputStream 을 이용해서 BufferedReader를 만들 때는 아래처럼 만듭니다.
new BufferedReader(new InputStreamReader(InputStream 객체))

import java.io.BufferedInputStream;
import java.io.BufferedReader;
import java.io.FileInputStream;
import java.io.FileReader;
import java.io.IOException;
import java.io.PrintWriter;

public class CharacterStreamUse {

	public static void main(String[] args) {
		//파일에 문자 단위로 기록
		PrintWriter pw = null;
		try {
			//인스턴스 생성
			pw = new PrintWriter("./pw.txt");
			pw.println("안녕하세요 반갑습니다.");
			pw.println("두번째 라인입니다.");
			pw.flush();
		}catch(Exception e) {
			System.out.println("파일 기록 실패");
			System.out.println(e.getLocalizedMessage());
		}finally {
			if(pw != null) {
				try {
					pw.close();
				} catch (Exception e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			}
		}
		
		BufferedReader br = null;
		try {
			br = new BufferedReader(
					new FileReader("./pw.txt"));
			
			//읽은 데이터를 저장하기 위한 StringBuilder
			StringBuilder sb = new StringBuilder();
			while(true) {
				//한 줄을 읽어오기
				String line = br.readLine();
				//읽은게 없으면 종료
				if(line == null) {
					break;
				}
				//읽은 데이터가 있으면 sb에 추가
				sb.append(line +"\n");
			}
			//읽은 데이터를 가지고 작업
			String msg = sb.toString();
			System.out.println(msg);
			
			
		}catch(Exception e) {
			System.out.println("파일 읽기 실패");
			System.out.println(e.getLocalizedMessage());
		}finally {
			if(br != null) {
				try {
					br.close();
				} catch (Exception e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			}
		}

	}

}

5.log 파일 읽어서 기술 통계 구하기 - 쿠팡 코딩 테스트 문제
=>log.txt 파일의 내용을 읽어서 각 줄의 맨 마지막 항(traffic)의 합계를 구하기

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;

public class LogAnalysis {

	public static void main(String[] args) {
		//log.txt 파일의 내용을 읽어서 통계량 계산하기
		
		BufferedReader br = null;
		
		//traffic 의 합계를 저장할 변수
		int trafficSum = 0;
		
		try {
			//파일 객체를 연결 - 이 줄에서 예외가 발생하면 파일 경로 확인
			br = new BufferedReader(new FileReader("./log.txt"));
			
			//하나의 줄은 공백으로 데이터가 구분되어 있고
			//줄의 마지막은 traffic 
			//traffic 의 합계
			
			while(true) {
				//한 줄을 읽어오고
				String line = br.readLine();
				//읽은 데이터가 없으면 종료
				if(line == null) {
					break;
				}
				//읽은게 있으면 처리
				//System.out.println(line);
				
				//공백을 기준으로 데이터를 분할
				String [] ar = line.split(" ");
				
				//맨 마지막 데이터를 출력
				//System.out.println(ar[ar.length - 1]);
				
				//맨 마지막 데이터를 정수로 변환
				int traffic = 0;
				
				//문자열을 정수로 변환하기
				//정수로 변환이 안되는 문자열은 0으로 취급하기 위해서 예외 처리
				try {
					traffic = Integer.parseInt(ar[ar.length - 1]);
				}catch(Exception e) {
					//System.out.println("정수가 아님");
				}
				//System.out.println(traffic);
				
				trafficSum = trafficSum + traffic;
			}
			System.out.println("트래픽 합계:" + trafficSum);
			
		}catch(Exception e) {
			System.out.println("파일 읽기 실패");
			System.out.println(e.getLocalizedMessage());
		}finally {
			if(br != null) {
				try {
					br.close();
				} catch (IOException e) {
					e.printStackTrace();
				}
			}
		}
	}
}

6.Properties 파일
=>어떤 정보를 파일에 기록해두고 읽어서 사용
=>데이터베이스 접속 위치나 아이디와 비밀번호 같은 것을 자바 코드에 직접 코딩(하드 코딩)하는 것은 보안 상 좋지 못함
소스 코드를 읽으면 접속 위치나 아이디 와 비밀번호가 노출되기 때문입니다.
이런 정보는 파일이나 데이터베이스에 기록해두고 읽어오는 형태를 취해야 합니다.

=>이전 방식의 개발
요구 사항 분석 -> 설계 -> 구현 -> 테스트 -> 이행 및 배포 -> 유지보수
이행: 개발 환경에서 운영 환경으로 시스템을 이전
맨 처음 한 번만 읽어서 사용하는 설정 중에서 운영 환경으로 이전하면 변경이 될 만 한 내용은 하드코딩 하면 안됩니다.

소스 코드가 변경되면 프로젝트는 다시 컴파일하고 빌드를 다시 해야 합니다.
컴파일하고 빌드를 다시 할 때 예기치 못한 오류가 발생할 수 있습니다.
정말 특별한 경우가 아니면 이행 단계에서 소스 코드를 수정하면 안됩니다.
이런 정보를 파일이나 데이터베이스에 기록해두고 읽어오면 내용이 변경되더라도 컴파일을 다시 할 필요가 없습니다.

=>변경이 될 만한 내용을 만들어 놓은 파일을 Properties 파일이라고 합니다.

=>위와 같은 문제를 해결하기 위해서 최근에는 개발 환경 과 운영 환경을 동일하게 합니다.
개발을 운영환경에서 할 수 있도록 합니다.
이러한 것 때문에 생긴 직업군이 DevOps 

1)c 드라이브에 config.properties 파일을 만들고 작성
url=192.168.0.100
id=adam
password=cyber

2)읽어내는 코드를 작성
import java.io.FileInputStream;
import java.io.IOException;
import java.util.Properties;

public class PropertyMain {

	public static void main(String[] args) {
		
		FileInputStream fis = null;
		try {
			fis = new FileInputStream("c:\\config.properties");
			
			//프로퍼티를 읽을 수 있는 객체 생성
			Properties properties = new Properties();
			//읽을 파일 과 연결
			properties.load(fis);
			
			String url = properties.getProperty("url");
			System.out.println(url);
			
		}catch(Exception e) {
			System.out.println("파일 읽기 실패");
			System.out.println(e.getLocalizedMessage());
		}finally {
			if(fis != null) {
				try {
					fis.close();
				} catch (IOException e) {
					e.printStackTrace();
				}
			}
		}
	}

}





