**연산자
1.최우선 연산자: [ ], .

2.대입 연산자
= : 오른쪽의 데이터를 왼쪽의 변수가 가리키도록 하는 연산자
우선 순위가 제일 낮습니다.

데이터라고 표현할 때는 리터럴(직접 입력하는 값), 변수 나 상수, 연산식, 메소드 호출 구문 등입니다.

변수나 상수가 = 의 왼쪽이 아니면 가리키고 있는 값입니다.

int a = 10; //10이라는 데이터를 a 가 가리키도록 하는 것입니다.

a = 20; //20이라는 데이터를 a 가 가리키도록 하는 것입니다.

a = a(20) + 5; //a가 가리키고 있는 20이라는 데이터와 5를 더해서 a가 가리키도록 하는 것입니다.

3.단항 연산자
1)!: boolean 데이터에 사용하는 연산자로 true는 false 로 false는 true로 만들어주는 연산자
연산자 다음에 데이터를 설정합니다.

!true -> false, !false -> true

2)~: 정수 데이터에만 사용이 가능한데 1의 보수를 구해줍니다.
=>절대값이 1 작거나 큰 숫자를 부호를 반대로 해서 리턴합니다.
=>숫자 연산에서는 큰 의미가 없고 그래픽 프로그램에서 색상 반전 같은데 이용합니다.

3)++: 정수 변수에만 사용
=>변수가 가리키고 있는 값에 1을 더해주는 연산자
=>이 연산자는 변수의 앞에 사용하는 것도 가능하고 뒤에 사용하는 것도 가능합니다.
=>단독으로 사용되면 앞에 사용하나 뒤에 사용하나 결과가 동일합니다.
명령이나 연산에 사용하면 달라집니다.
=>앞에 붙이게 되면 1증가를 먼저 시키고 명령이나 연산에 사용합니다.
뒤에 붙이게 되면 명령이나 연산에 사용하고 1증가시킵니다.

4)--: 정수 변수에만 사용
=>동작의 원리는 ++ 와 동일
=>변수의 값을 1감소 시킵니다.

5)단항 연산자는 최우선 연산자 다음으로 우선순위가 높습니다.

4.산술 연산자
%, /,* , +,-
=>산술 연산의 결과는 최소가 int
byte + byte = byte 가 아니고 int

=>2개의 자료형이 다르면 표현 범위가 큰 자료형으로 변경을 해서 연산을 수행합니다.

=>자료형이 동일하면 결과는 그 자료형으로 나옵니다.
다르면 더 큰 자료형으로 나옵니다.

1)%: 정수 데이터에만 사용할 수 있습니다.
정수1 % 정수2 : 정수1을 정수2로 나눈 나머지가 리턴됩니다.
배수를 이용해야 하는 알고리즘에 이용하는데 이것을 이용해서 주기적인 패턴을 만듭니다.

public class Mod {

	public static void main(String[] args) {
		int x = 0;
		try {
			while(true) {
				Thread.sleep(1000);
				if(x % 3 == 0) {
					System.out.println("빨강");
				}
				if(x % 3 == 1) {
					System.out.println("파랑");
				}
				if(x % 3 == 2) {
					System.out.println("노랑");
				}
				++x;
			}
		}catch(Exception e) {}

	}

}

=>위의 프로그램을 수정해서 월화수목금토일을 순서대로 출력하도록 해보세요


2)/
=>자바 와 C에서는 동일한 자료형끼리 연산을 하면 결과는 그 자료형으로 나옵니다.
실수를 정수로 변경하면 소수는 버려집니다. 

public class Division {

	public static void main(String[] args) {
		int x = 10;
		int y = 5;
		System.out.println("x/y:" + x/y); //2
		
		x = 10;
		y = 4;
		//정수 / 정수 는 정수입니다.
		System.out.println("x/y:" + x/y); //2
		
		//2.5가 나오도록 하기
		// / 의 결과가 실수가 되도록 할려면 최소 데이터 중의 1개는
		//실수 이어야 합니다.
		//강제 형 변한을 이용합니다.
		//x를 실수로 형변환해서 실수 연산을 하도록 만들어서 2.5
		//y를 형변환해도 됩니다.
		System.out.println("x/y:" + (double)x/y); //2
		
		//실수 / 실수 의 결과를 정수로 변환 - 기본적으로 소수가 없어짐
		//소수 첫째 자리 반올림하기
		//실수는 정수에 저장을 못하므로 실수 데이터를 정수로 저장할려면
		//강제 형 변환을 해야 합니다.
		int result = (int)(10.8 / 3); //원래 결과는 3.6 인데 3으로 변환
		System.out.println("result:" + result);
		result = (int)(10.8 / 3 + 0.5); //원래 결과는 3.6 인데 4으로 변환
		System.out.println("result:" + result);
	}

}

3)*: 곱하기

4)-:빼기

5)+
=>숫자 데이터끼리는 숫자 데이터로 +를 해서 리턴합니다.
=>문자열 과 다른 데이터를 + 하면 다른 데이터를 문자열로 변환해서 결합을 합니다.

10 + 5 -> 15
"10:" + 5 -> "10:5"

"Hello" + "World" -> HelloWorld

"10" + 5 -> 105

5.shift
=>정수 데이터에만 사용할 수 있는 연산자
=>프로그램을 처음 할 때는 어려우면 일단 패스를 했다가 저장 원리를 이해하면 그 때 다시 보는게 좋습니다.
1)>>: 왼쪽의 데이터를 오른쪽의 숫자만큼 오른쪽으로 밀어냅니다.
한번 밀어낼때마다 / 2 한 효과 

2)<<: 왼쪽의 데이터를 오른쪽의 숫자만큼 왼쪽으로 밀어냅니다.
한번 밀어낼때마다 * 2 한 효과 

3)>>>: 오른쪽으로 미는데 맨 앞의 부호도 밀어냅니다.
>>, << 는 부호는 그대로 유지하는데 >>> 부호도 밀어냅니다.

10 >> 1 : 5 
10 >> 2 : 2

10 << 2 : 40


옵션: 	1, 2, 3, 4
	1(00000001 , 1<<0), 2(00000010, 1<<1), 4(00000100, 1<<2), 8(00001000)


