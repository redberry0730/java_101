자바 프로젝트 - 프로그램
1.workspace - 프로젝트를 관리하기 쉽도록 만든 디렉토리의 개념이며 환경 설정이 workspace 단위로 설정됩니다.
프로그램 실행과는 아무런 관계가 없습니다.
workspace를 변경하면 환경설정은 전부 초기화 됩니다.

2.project - 배포의 단위

3.module - 작은 프로그램(실행이 가능한 단위)
project를 만들면 기본 모듈을 하나 만들어주기 때문에 만들지 않아도 프로그램을 만들 수 있고 실행할 수 있습니다.

4.class - 동일한 목적을 가진 저장 공간(Data) 과 작업(Method)의 모임
=>자바에서는 이 클래스가 독립적으로 생성할 수 있는 최소 단위
=>자바는 완벽한 객체 지향 언어입니다.

**공간이나 작업을 class 가 아닌 만들 수 있으면 함수형 프로그래밍 언어라고 합니다.

**자바는 entry point(프로그램의 시작점)가 public static void main(String [] args) 입니다.
프로젝트에 main 이 없으면 실행되지 않습니다.

**실행 가능한 프로그램을 만들고 실행
1.eclipse를 실행

2.프로젝트 생성
=>[File] - [New] - [Java Project]를 선택
Java Project가 보이지 않으면 Other를 누르고 Java Project를 찾아서 선택

=>Project Name을 설정 : 이름은 아무렇게나 만들어도 되지만 되도록이면 다른 사람이 알아볼 수 있도록 자신이나 회사의 도메인을 쓰고 기술 이름을 붙여서 생성합니다.

3. 실행 가능한 클래스 만들기
=>src(source의 약자, 여기 만든 파일만 컴파일합니다.) 디렉토리를 선택하고 마우스 오른쪽을 클릭해서 [New] - [Class]를 선택하고 이름을 설정하고 main 을 체크 

4.main(){ } 안에 코드를 작성
System.out.println("메시지");

5.컴파일을 하고 빌드를 하고 실행을 해야 합니다.
IDE에서는 [Run] - [Run]을 누르면 이 과정을 한꺼번에 진행합니다.
=>에러가 발생하면 콘솔(아래 창)에 빨간색 글씨들이 출력됩니다.
글씨들을 보고 어디서 무슨 에러를 발생시켰는지 확인해서 수정하고 다시 실행

**프로그램 실행 과정
소스 코드 작성 -> 컴파일을 해서 실행 가능한 코드로 번역 -> 여러 파일들의 관계를 설정해서 실행 가능하도록 빌드를 수행 -> 실행

**자바 프로그램에서 클래스(자바 파일)의 구조
1.소스 파일의 확장자는 java - 실행 가능한 클래스의 확장자는 class

2.소스 파일의 최상단에는 package ????
=>이 문장은 생략하거나 한 번만 맨 위에 나와야 합니다.
=>package는 클래스의 소속을 나타내는 것입니다.
없으면 소속이 없는 것입니다.

3.package 다음에는 import 가 나올 수 있습니다.
import는 없을 수도 있고 여러 개 나올 수 있습니다.
import는 다른 언어를 공부할 때 나오면 정확하게 알아두셔야 합니다.
자바에서는 이름을 줄여쓰기 위해서 사용합니다.

List는 원래 이름이 java.util.List 입니다.
매번 이렇게 길게 쓰면 너무 코드가 복잡해 집니다.
import java.util.List 이렇게 해주면 이제부터는 List라고만 써도 java.util.List가 됩니다.

파이썬이나 swift 에서는 import가 내용을 가져와서 현재 코드에 포함시키는 것입니다.

4.import 다음에는 class{ } 가 나옵니다.
하나의 파일에 1개 이상이상 존재해야 합니다.
class 앞에 public이 붙은 것은 1개만 나와야 합니다.

**작성 규칙
1.대소문자 구별합니다.

2.한 번에 실행해야 하는 문장 마지막은 ; 으로 끝나야 합니다.
=>한번에 실행해야 하는 문장은 변수를 생성 하는 것 과 계산을 수행하는 것 그리고 메소드 호출구문입니다.

3.행의 개념이 없기 때문에 줄 바꿈은 아무런 의미가 없습니다.
들여쓰기도 아무런 의미가 없습니다.

4.블럭은 { 로 시작해서 }로 끝납니다.
{ 와 }의 개수는 일치해야 합니다.

**콘솔에 출력하는 메소드
System.out.print(데이터 또는 "메시지"); - 초보자: 내용을 출력하고 줄 바꿈을 하지 않음
이 명령들이 여러 개 있으면 모아서 한꺼번에 실행

System.out.println(데이터 또는 "메시지"); - 초보자: 내용을 출력하고 줄 바꿈을 합니다.
명령들이 여러 개 있어도 각각 실행

System.out.printf("서식 문자열", 데이터1, 데이터2, ....); - 추천, 서식을 아직 안배워서 당분간은 사용하지 않음

**프로그램의 구성 요소
1.리터럴, 변수, 상수
=>데이터를 의미

2.연산자
=>계산을 수행해주는 기호나 명령어 
+: 더하기 해주는 연산자

3.제어문
=>명령의 흐름을 바꿔주는 명령어

4.클래스 와 인스턴스
=>클래스는 여러 가지를 모아놓은 틀: 모델 하우스
=>인스턴스는 틀을 이용해서 만든 실제 사용하는 객체: 아파트

5.주석(comment)
=>보충 설명
=>실행되지 않는 문장
=>프로그램을 읽기 쉽고 이해하기 쉽도록 하기 위해서 작성하는 문장

// 다음에 작성 - 한 줄 주석

/* 내용 */ - 여러 줄 주석

/** 내용 */ - 문서 만들 때 사용하는 주석

=>주석이 있거나 코드를 설명할 수 있으면 그 개발자가 만든 것으로 간주

**프로그래밍
=>데이터(자료구조) 와 처리(알고리즘)의 모임

**Data
1.Data를 분류하는 방법
1)데이터 개수를 가지고 분류
=>scala data: 데이터 1개 - 정수, 실수, 문자, 참&거짓
=>vector data(collection): 0개 이상의 데이터 모임 - 동일한 모양의 모임, 모양에 상관없이 모은 것

2)기본형(value) 과 참조형(reference)
=>scala 데이터는 데이터가 1개 이기 때문에 하나의 이름으로 표현할 수 있습니다.
기본형이라고 합니다.
=>vector 데이터는 데이터가 여러 개라서 하나의 이름만으로 표현할 수 없습니다.
데이터가 시작하는 위치를 이름으로 설정하고 내부의 데이터는 인덱스나 키를 이용해서 표현합니다.

int a = 10;

a ----> 10

int [] ar = {10, 20};

ar ------->
	10 [0]
	20 [1]
ar[0]: 10
ar[1]: 20

3)데이터의 변경 가능성에 따른 분류
=>mutable(변경 가능한): 읽고 쓰기 가능, 변수(variable)
=>immutable(변경 불가능한): 읽기 만 가능, 상수(constant)

4)데이터의 모양에 따른 분류
=>정형 데이터: 모양이 결정된 데이터 - 테이블 모양을 만들 수 있는 데이터
=>비정형 데이터: 모양이 결정되지 않은 또는 없는 데이터 - 음성
=>반정형 데이터: 비정형이지만 데이터의 모양을 설명하는 코드가 있어서 정형으로 만들 수 있는 데이터 - JSON, XML, CSV

2.Data 사용
1)Literal : 사용자가 직접 작성하는 데이터
10 -> int 형 정수
10L -> long 형 정수

10.7 -> double 형 실수
10.7f ->float 형 실수

'문자' -> char 형 문자

true 또는 false -> bool

null -> 가리키는 게 없다.

"0개 이상의 문자 나열" -> String 형 상수

2)Variable(변수): 데이터가 저장된 공간에 붙이는 이름
=>재사용하기 위해서 이름을 붙입니다.
=>선언
자료형 이름[ = 기본값];

3)Constant(상수): 데이터를 변경할 수 없도록 하는 이름
final 자료형 이름[ = 기본값];

3.자료형
1)하나의 데이터를 가리키는 자료형
boolean: true 나 false 만 저장할 수 있는 자료형

byte: 8bit(0 또는 1 하나를 저장할 수 있는 메모리 단위 - bit) 정수, 파일 처리 나 네트워크 프로그래밍 또는 그래픽 프로그래밍에서 중요

short: 16bit 정수

char: 16bit 정수 - char는 문자나 숫자를 대입하면 문자의 경우 문자에 해당하는 코드를 저장하고 숫자는 그대로 저장했다가 출력할 때 코드에 해당하는 문자를 출력하는 것입니다. 문자열 처리에서 중요

int: 32bit 정수 - 정수의 기준형, 대부분 정수는 int를 사용
long: 64bit 정수 - 특별한 경우만 잘 사용하지 않고 대부분 float 나 double 사용

float: 32bit 실수 - 예전에 많이 사용 
double: 64bit 실수 - 실수의 기준형, 실수는 double을 사용

byte 부터 double 쪽으로 내려 올 수 록 숫자의 표현범위가 커집니다.
큰 범위의 데이터에는 작은 범위의 데이터를 저장할 수 있지만 작은 범위의 데이터에 큰 범위의 데이터를 저장할 수 없습니다.

실수 자료형에 정수는 저장이 되지만 정수 자료형에 실수는 저장을 못합니다.


