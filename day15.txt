**Thread
1.프로세스 와 스레드
1)프로세스
=>실행 중인 프로그램
=>프로세서를 가지고 있는 상태에서 프로그램을 실행하고 있는 작업 단위
=>프로세스는 실행 중에는 제어권을 다른 곳으로 넘기지 못함
=>한 번 실행이 되면 실행이 끝날 때 까지 다른 작업을 수행할 수 없음 - 동기적 실행
일반적인 함수 호출

2)스레드
=>프로세스 내에서 수행되는 독립적인 작업 단위
=>프로세스 내에서는 독립적이지만 단독으로 존재할 수 는 없음
=>프로세스 안에 존재해야 함
=>수행 중에 다른 스레드로 제어권을 넘길 수 있음
작업을 쉬는 시간이 생기거나 다른 입출력이 있으면 제어권을 다른 스레드에게 넘겨서 다른 작업을 수행할 수 있어서 마치 2개의 동시에 수행되는 것 처럼 보이게 할 수 있습니다.

2.Java에서의 스레드
=>Thread 클래스를 상속받아서 구현이 가능
=>Runnable 인터페이스를 implements 해서 구현 가능

1)Thread 클래스를 상속받아서 구현
=>Thread 클래스를 상속받는 클래스를 만들고 run 메소드에 스레드로 수행할 내용을 작성
=>인스턴스를 생성해서 start를 호출하면 스레드로 작업을 시작

2)Runnable 인터페이스를 implements 해서 구현
=>Runnable 인터페이스를 implements 한 클래스를 만들고 run 메소드에 스레드로 수행할 내용을 작성
=>인스턴스를 생성해서 Thread 클래스의 생성자에 대입해서 Thread 클래스의 인스턴스를 생성
=>생성된 Thread 클래스의 인스턴스가 start를 호출하면 됩니다.


//스레드 클래스
class ThreadEx extends Thread{
	//스레드로 수행할 내용을 가지는 메소드
	public void run() {
		//1초마다 Hello Thread를 10번 출력하는 스레드
		try {
			for(int i=0; i<10; i++) {
				Thread.sleep(1000);
				System.out.println("Hello Thread");
			}
		}catch(Exception e) {
			System.out.println(e.getLocalizedMessage());
		}
	}
}

//Runnable 인터페이스를 implements 한 클래스를 이용
class RunnableImpl implements Runnable{
	@Override
	public void run() {
		//Hello Runnable 을 1초마다 10번 출력하는 코드를 작성
		try {
			for(int i=0; i<10; i++) {
				Thread.sleep(1000);
				System.out.println("Hello Runnable");
			}
		}catch(Exception e) {
			System.out.println(e.getLocalizedMessage());
		}
		
	}
}

public class ThreadMain {
	public static void main(String[] args) {
		//Thread 클래스로 상속받은 경우
		ThreadEx th1 = new ThreadEx();
		//스레드로 시작
		th1.start();
		
		//Runnable 인터페이스를 implements 한 경우
		RunnableImpl runnable = new RunnableImpl();
		Thread th2 = new Thread(runnable);
		th2.start();
		
		//자바는 상속을 받는 클래스를 만드는 대신에 anonymous class 가능
		Thread th3 = new Thread(new Runnable() {

			@Override
			public void run() {
				try {
					Thread.sleep(1000);
					for(int i=0; i<10; i++) {
						System.out.println("Hello Anonymous");
					}
				}catch(Exception e) {
					System.out.println(e.getLocalizedMessage());
				}
			}
		});
		th3.start();
	}
}

3.스레드를 사용해야 하는 경우
1)오랜 시간이 걸리는 작업
2)파일 입출력도 오래걸리는 작업이라서 스레드를 사용하는 것을 권장
3)네트워크 작업 - 안드로이드에서는 네트워크 작업에 스레드를 사용하지 않으면 에러가 발생
다른 모든 프로그래밍에서 고려할 사항

4.Thread 클래스의 메소드
1)void run(): 스레드로 수행할 내용을 작성하는 메소드
2)void start(): 스레드로 동작을 시작시키는 메소드

3)static void sleep(long msec): msec 밀리 초 동안 현재 스레드를 중지

4)스레드 이름 관련: getName(), setName(String name)
5)우선 순위 관련: getPriority(), setPriority(int priority)
6)daemon 관련: setDaemon(boolean )

5.Daemon Thread
=>모든 스레드는 자신의 작업이 종료될 때 까지 수행
=>daemon 을 true로 설정하면 daemon 이 아닌 스레드가 없으면 자동으로 종료됩니다.
보조적인 역할을 수행해주는 스레드
=>응용 프로그램들에서 자동 저장 기능 이나 게임에서 몬스터 생성 등이 데몬 스레드의 대표적인 예입니다.


public class DaemonThreadMain {

	public static void main(String[] args) {
		//스레드 생성
		Thread th = new Thread() {
			public void run() {
				try {
					System.out.println("스레드 시작");
					Thread.sleep(10000);
					System.out.println("스레드 종료");
				}catch(Exception e) {
					System.out.println(e.getLocalizedMessage());
				}
			}
		};
		
		//데몬 스레드로 생성 - 다른 작업이 없으면 자동으로 종료
		//중요하지 않은 작업을 수행하는 스레드에 사용
		th.setDaemon(true);
		
		th.start();
		
		System.out.println("메인 함수 종료");

	}

}


6.Thread Priority(우선 순위)
=>스레드를 더 많이 실행하고 먼저 실행할 것인지 순서를 설정하는 것
=>setPriority에 1~10까지의 정수를 설정
=>1이 가장 낮고 10이 가장 높으며 기본은 5
=>실제로 설정을 해보면 확률적으로 그렇다는 것이지 항상 그렇지는 않음

7.스레드 중지
=>작업 시간이 너무 길거나 종료될 기미가 안보이는 경우 스레드를 종료할 수 있습니다.
=>Thread의 run 메소드에 InterruptedException 이 발생하면 return 하도록 작성
중지하고자 할 때 Thread 인스턴스의 interrupt()를 호출하면 종료됨

//Interrupt: 작업 중 신호를 보내는 것

public class ThreadInterrupt {

	public static void main(String[] args) {
		Thread th = new Thread() {
			public void run() {
				//1초 마다 스레드의 이름을 출력
				//총 10번 수행
				try {
					for(int i=0; i<10; i++) {
						Thread.sleep(1000);
						System.out.println(getName());
					}
				}catch(Exception e) {
					System.out.println("스레드가 종료 됩니다.");
					return;
				}
			}
		};
		
		th.start();
		
		//7초 후에 스레드 중지
		try {
			Thread.sleep(7000);
			//th 스레드에 InterrupteException이 발생
			th.interrupt();
		}catch(Exception e) {
			System.out.println(e.getLocalizedMessage());
		}

	}

}

=>Thread 클래스의 run 메소드에는 InterruptedException 이 발생하면 return 하도록 해주어야 합니다.

8.Multi Thread
=>2개 이상의 스레드가 동작 중인 상황
1)장점
=>작업의 속도를 높일 수 있음

2)단점
=>너무 많은 스레드를 만들면 스레드 전환 시간이 많이 걸려서 작업 속도가 느려질 수 있습니다.
=>공유 자원의 사용 문제

3)critical section(임계 영역)
=>공유 자원을 사용하는 코드 영역

4)mutual exclusion(상호 배제)
=>하나의 스레드가 사용 중인 공유 자원을 다른 스레드가 수정하면 안된다.
=>하나의 스레드가 사용 중인 공유 자원을 다른 스레드가 수정해버리면 예측할 수 없는 결과가 만들어 질 수 있습니다.

5)consumer 문제(생산자 와 소비자 문제)
=>생산자와 소비자는 동시에 물건을 사용해도 되지만 생산자가 물건을 생산해주어야 만 소비자는 물건을 사용할 수 있습니다.
소비자는 물건이 없을 때 대기 상태에 들어가고 생산자는 물건을 생산하면 소비자에게 알림을 주어야 합니다.

6)Dead Lock 문제
=>결코 발생할 수 없는 사건을 무한정 기다리는 것

7)동기화를 이용해서 상호배제 문제 해결
=>메소드 결과형 앞에 synchronized 를 붙이면 동기화 메소드가 됩니다.
=>한 번에 수행되어야 하는 코드를 synchronized(객체){ }로 묶으면 블록이 동기화가 됩니다.
동기: 순서대로 작업하는 것
비동기: 순서와 상관없이 작업하는 것

**IO(Input & Output)
=>입력을 받고 출력을 하는 것
=>java.io 패키지에서 기능을 제공
1.java.io.File 클래스
=>파일이나 디렉토리를 추상화 한 클래스
=>파일에 대한 정보나 파일을 생성하고 삭제하는 작업 등을 수행할 수 있습니다.

1)디렉토리 구분 기호
Windows: \ -> 프로그램에서 작성할 때는 \\ 으로 입력해야 합니다.
그 이외: /
=>프로그램을 작성할 때 운영체제를 확인해서 디렉토리 기호를 다르게 지정해야 하는데 자바에서는 File.seperator를 호출하면 현재 운영체제의 디렉토리 기호를 리턴해주기 때문에 이를 이용하면 됩니다.

2)경로
=>절대 경로: 루트로부터의 경로를 전부 입력하는 것
c:\\temp\\a.java : 윈도우즈의 절대 경로 - 드라이브 이름부터 시작
/Users/adam/a.java : 윈도우즈를 제외한 곳에서의 절대 경로

=>상대 경로: 현재 디렉토리로부터의 경로
./: 현재 디렉토리로 생략도 가능, ./ 나 / 없이 이름부터 시작하면 현재 디렉토리부터
../: 상위 디렉토리

3)File 클래스의 생성자
File(String 파일경로)

4)주요 메소드
=>boolean exists(): 존재 여부를 알려주는 메소드
=>long length(): 파일의 크기
=>long lastModified(): 파일의 마지막 수정 시간
=>boolean delete(): 파일 삭제

파일 다운로드 구현: 파일이 이미 존재하면 다운로드 받지 않고 없는 경우에만 다운로드를 받고자 할 때 exists()로 확인하고 다운로드 받으면 됩니다.

다운로드를 받기 전에 파일의 크기를 알려줘서 다운로드 받을 지 여부를 선택하도록 해주는 것이 좋습니다. 다운로드 받고 도중에 받는 파일의 크기를 알려주는 용도로도 사용

파일을 다운로드 할 때 최신의 파일인지 아닌지 확인해서 업데이트 해주고자 하는 경우 파일이 있는지 확인하고 파일이 있으면 서버의 파일 수정 날짜와 클라이언트의 파일 수정 날짜를 비교해서 같으면 최신이고 다르면 이전에 다운로드 받은 파일입니다.
업데이트를 할 때는 이전 파일을 지워야 합니다.

5)클라이언트 프로그램을 만들 때 파일을 같이 배포해야 한다면 되도록이면 상대경로를 사용할 수 있도록 앱 안에 파일을 포함시켜 주는 것이 좋습니다.

//이 예제는 프로젝트 디렉토리에 파일을 복사하고 new File 부분을 자신의 파일로 수정해야 합니다.

import java.io.File;
import java.util.Date;

public class FileMain {

	public static void main(String[] args) {
		//File 객체 생성
		File f = new File("./part-00000.csv");
		//파일의 존재 여부 확인
		System.out.println(f.exists());
		//파일의 크기 출력
		System.out.println(f.length()/1000.0 + "KB");
		//파일의 마지막 수정 날짜
		Date lastModified = new Date(f.lastModified());
		System.out.println(lastModified);

	}

}

2.Stream
=>데이터를 주고 받는 통로 
=>파일이나 네트워크 등에서 데이터를 전송하고 읽어오기 위해서는 스트림이 필요
1)스트림 종류
=>방향에 따른 분류
입력 스트림: 데이터를 받아오기 위한 스트림 - 인터넷에서 다운로드, 키보드로 부터 입력받는 경우, 파일의 내용을 읽고자 할 때

출력 스트림: 데이터를 전송하기 위한 스트림 - 업로드, 모니터에 출력할 때 , 파일에 기록할 때 사용하는 스트림

=>전송하는 데이터 종류에 따른 분류
바이트 스트림: 바이트 단위로 데이터를 주고 받는 스트림 - 문자열을 제외하고는 전부 바이트 스트림

문자 스트림: 문자 단위로 데이터를 주고 받는 스트림 - 문자열을 주고 받는 스트림

2)buffer
=>입출력 효율을 높이기 위해서 모아서 처리하기 위한 저장 공간

CPU <------------> 버퍼 <---------------> 입출력 장치
CPU 가 입출력장치로부터 데이터를 받으면서 작업을 하고자 하는 경우 CPU는 빠르고 입출력 장치는 느리기 때문에 CPU의 노는 시간이 많이 발생합니다.
버퍼를 만들어서 입출력장치가 버퍼에 내용을 입력하고 CPU는 일정량이 모아지면 읽어서 처리하는 방식으로 입출력을 합니다.














