**외부 라이브러리 사용
1.Open Source
=>프로그램을 작성할 때 만든 소스를 오픈해서 다른 사용자들이 이 소스 코드를 가지고 새로운 프로그램을 만들거나 수정할 수 있도록 공개한 코드

1)장점
=>편리성: 개발자가 처음부터 끝까지 모든 것을 개발할려고 하면 시간과 노동력이 많이 필요함
=>뛰어난 성능: 여러 개발자들이 협업해서 많들고 많은 시간을 이어져 왔기 때문에 성능이 우수하고 신뢰성이 높음

2)사용
=>프로그래밍 언어의 기본적인 문법을 학습하고 자신에게 필요한 기능을 설계를 하고 오픈 소스가 있다면 이를 이용해서 구현

3)Java 의 Open Source Project
=>Hadoop: 분산처리 플랫폼
=>Cassandra: NoSQL
=>Lucene: 검색 엔진 플랫폼
=>Maven: Java Build Tool
=>Apache Web Server
=>Log4j: 로그 기록
=>commons project: 자바에서 많이 사용하는 유틸리티 클래스를 제공

2.자바 프로그램의 실행 과정
자바 소스 코드를 작성(개발자가 이해하는 코드) -> 컴파일을 해서 .class 파일(jvm 이 이해하는 코드)을 생성 -> 실행 가능하도록 build(우리가 작성한  코드나 필요한 라이브러리들을 하나로 묶어 줌) ->loading(실행 가능하도록 만든 코드들을 jvm 에 배치 - 기존의 jdk 가 가지고 있는 클래스들과 우리가 만든 클래스들이 한묶음으로 만들어짐) -> 실행

IDE(통합 개발 환경): 위의 전 과정을 하나의 프로그램으로 할 수 있도록 해주는 프로그램

3.Build Tool
=>빌드 작업을 대신 수행해주는 프로그램
=>java 에서는 예전에 Ant 를 사용했는데 최근에는 Maven 과 Gradle을 사용
=>예전에 spring framework 는 maven 을 사용하는 경우가 많고 android 는 gradle 을 사용
요즈음은 일반 웹 프로그래밍에서도 gradle을 많이 사용

4.Maven 
=>pom.xml 파일에 기반한 자바 프로젝트 빌드 도구
=>pom.xml 파일에 외부 라이브러리의 의존성 설정이나 레포지토리 그리고 프로젝트 정보에 대한 설정등을 수행
1)Maven Project 생성
=>처음부터 Maven Project 로 생성
=>일반 프로젝트를 Maven Project 로 변환해서 생성

2)java project 의 외부 라이브러리 사용 방법
=>일반 application 프로젝트에서는 외부 라이브러리를 build path에 추가해야 합니다.
=>web project 에서는 WEB-INF 디렉토리 안의 lib 디렉토리에 라이브러리를 복사해 주어야 합니다.
=>Maven Project 에서는 pom.xml 파일에 설정만 하면 됩니다.
=>Gradle Project 에서는 build.gradle 이라는 파일에 설정하면 됩니다.

3)용어
=>repository: 저장소 - 외부 라이브러리를 가진 저장소
=>dependency(의존): 의존하는 외부 라이브러리

4)실습 - Build Tool 없이 외부 라이브러리 사용 
=>클래스를 만들고 실행 - 에러
public class MySQLMain {

	public static void main(String[] args) {
		System.out.println("MySQL JDBC 드라이버 로딩 중");
		
		try {
			//MySQL 드라이버 클래스는 MySQL 연동 외부라이브러리에 존재
			Class.forName("com.mysql.jdbc.Driver");
			System.out.println("MySQL 드라이버 로드 성공");
		}catch(Exception e) {
			System.out.println("MySQL 드라이버 로드 실패");
			System.out.println(e.getLocalizedMessage());
		}

	}

}

=>java application 에서 외부 라이브러리 사용 - 외부 라이브러리를 build path에 추가해주면 됩니다.
www.mvnrepository.com 에서 mysql 로 라이브러리를 검색해서 다운로드

다운로드 받은 파일을 프로젝트에 복사

복사한 jar 파일을 선택하고 마우스 오른쪽을 누르고 [Build Path] - [Add To Build Path]를 선택

실행하면 예외가 발생하지 않음

=>외부 라이브러리 사용 제거
복사한 jar 파일을 선택하고 마우스 오른쪽을 누르고 [Build Path] - [Remove From Build Path]를 선택

실행하면 예외가 발생

5)실습 - Maven Project 로 변환해서 외부 라이브러리를 사용
=>현재 프로젝트를 Maven Project 로 변환
프로젝트를 선택한 후 마우스 오른쪽을 눌러서 [Configure] - [Convert To Maven Project]를 선택
pom.xml 파일이 생성되었는지 확인

=>www.mvnrepository.com 에서 mysql 을 검색해서 maven 코드를 조회
<dependency>
    <groupId>mysql</groupId>
    <artifactId>mysql-connector-java</artifactId>
    <version>8.0.21</version>
</dependency>

=>pom.xml 파일에 dependencies 태그를 추가하고 위의 코드를 작성한 수 실행
build 태그 앞에 작성해도 되고 뒤에 작성해도 됩니다.
<!-- 의존성 설정 -->
	<dependencies>
		<dependency>
			<groupId>mysql</groupId>
			<artifactId>mysql-connector-java</artifactId>
			<version>8.0.21</version>
		</dependency>
	</dependencies>

6)동작 원리
pom.xml 파일에 dependencies 태그 안에 dependency를 설정하면 현재 컴퓨터의 .m2 라는 디렉토리를 확인해서 라이브러리가 있는지 확인해서 있으면 프로젝트의 build path에 추가해서 사용

.m2 디렉토리에 라이브러리가 존재하지 않으면 repositories 태그 안에서 설정된 repository에서 찾아서 다운로드를 .m2에 하고 사용합니다.

repositories 설정이 없거나 설정된 repository에 라이브러리가 없으면 maven 중앙 저장소에서 다운로드 받아서 사용

이 동작 원리는 gradle에서도 마찬가지

7)장점
=>외부 라이브러리를 직접 다운로드 받아서 설정할 필요가 없어짐

5.JUnit
1)TDD(Test - Driven Development , 테스트 주도 개발)
=>매우 짧은 개발 사이클을 반복하는 개발 프로세스 중 하나
=>개발자는 먼저 요구 사항을 검증할 수 있는 테스트 케이스를 만들고 이 케이스를 통과하기 위한 최소한의 코드를 작성해서 테스트를 통과하면 프로젝트에 반영하는 방식
=>비슷한 방식으로 Agile 방법론이 있습니다.
=>프로그램을 만들고자 할 때 처음부터 완성된 제품을 만들려고 하면 실패할 가능성이 높고 사용자의 요구 사항 변경에 적응하기 어렵습니다.

2)자바에서 테스트 용으로 가장 많이 사용하는 라이브러리가 JUnit
=>이클립스 나 안드로이드 스튜디오에 내장되어 있으므로 별도로 설치할 필요가 없음
=>프로젝트를 선택하고 마우스 오른쪽을 클릭한 후 [Build Path] - [Configure Build Path]를 선택하고 Libraries 탭에서 자바 버전을 선택하고 [Add Library]를 클릭 한 후 JUnit을 추가해주면 됩니다.

3)사용 방법
=>TestCase로부터 상속받는 클래스를 만들고 메소드를 생성하면 됩니다.

=>Object 클래스로부터 상속받는 클래스를 만들고 테스트 하고자 하는 메소드 위에 @Test 를 추가해주면 됩니다.

4)실습 1 - TestCase로부터 상속받는 클래스 이용
import junit.framework.TestCase;

public class SampleTest extends TestCase {
	public void method() {
		System.out.println("테스트를 위한 메소드");
	}
}

=>마우스 오른쪽을 클릭하고 [Run As] - [JUnit Test]를 클릭하면 method 가 실행됩니다.
안드로이드 나 Web Application 은 main 메소드가 없기 때문에 메소드의 실행 결과를 볼려면 프로젝트를 전체를 실행해야 합니다.

JUnit을 이용하면 main 메소드 없이 테스트가 가능합니다.

5)실습2 - @Test 이용
import org.junit.Test;

public class SampleTest {
	@Test
	public void method() {
		System.out.println("테스트를 위한 메소드");
	}
}

6.Selenium
=>웹 앱을 테스트하는데 이용하는 프레임워크
=>브라우저를 동작시켜서 웹 브라우저에 동작을 지정할 수 도 있고 데이터를 읽어오는 것도 가능
1)설치
=>selenium 라이브러리 설치
pom.xml 파일의 dependencies 에 추가

<dependency>
    <groupId>org.seleniumhq.selenium</groupId>
    <artifactId>selenium-java</artifactId>
    <version>3.141.59</version>
</dependency>

=>브라우저 드라이버 설치: 크롬 드라이버 다운로드
https://chromedriver.chromium.org/downloads

자신의 크롬 버전에 맞는 드라이버를 다운로드 받아서 압축을 해제하고 파일을 적당한 곳에 복사 

2)다음에 자동으로 로그인 하기
import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeDriver;

public class SeleniumTest {

	public static void main(String[] args) {
		//크롬 드라이버를 등록
		System.setProperty(
			"webdriver.chrome.driver",
			"c:\\chromedriver.exe");
		//크롬 생성
		WebDriver driver = new ChromeDriver();
		
		//사이트 접속
		driver.get("https://logins.daum.net/accounts/signinform.do?url=https%3A%2F%2Fwww.daum.net%2F");
		
		try {
			Thread.sleep(10000);
		} catch (InterruptedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		driver.findElement(By.xpath("//*[@id=\"id\"]")).sendKeys("ggangpae3");
		driver.findElement(By.xpath("//*[@id=\"inputPwd\"]")).sendKeys("cyberadam");
		driver.findElement(By.xpath("//*[@id=\"loginBtn\"]")).click();
		
		
		//html 출력
		System.out.println(driver.getPageSource());
	}

}


** 자바 프로그래밍
1.안드로이드 나 IoT, PC 용 애플리케이션 프로그램
=>자료형, 연산자, 제어문, 배열, 클래스, 상속, 다형성, 예외처리, anonymous class, java.lang, java.util, 람다, io, 스레드, 네트워크, xml 과 json 파싱 까지는 한 번 보고 안드로이드나 IoT, PC 용 애플리케이션 프로그래밍을 학습하면 됩니다.
=>안드로이드나 IoT 에서는 서버와의 연동이 가장 중요

2.서버 프로그래밍
=>자료형, 연산자, 제어문, 배열, 클래스, 상속, 다형성, 예외처리,  java.lang, java.util, 람다, io, 스레드, 네트워크 정도를 하면 됩니다.
=>데이터베이스 연동이 가장 중요

3.모든 프로그래밍 언어 학습을 한 후 할만한 내용
=>데이터베이스(RDBMS - Oracle 이나 MySQL-Maria DB, NoSQL - Mongo DB)를 하고 난 후 언어와 연동
=>자료구조, 알고리즘
=>객체 지향 언어 인 경우 - 디자인 패턴
=>소프트웨어 공학 - 개발 방법론
=>자바로 서버 프로그래머가 되고자 하는 경우에는 Spring Framework 와 JPA 가 필수
=>웹 프론트 앤드를 하고자하는 경우에는 HTML, CSS, JavaScript(TypeScript, react 나 vue 또는 angular.js 중 하나 - 현재 국내에서는 react.js 를 가장 많이 사용하고 구인도 많이 합니다.)
=>스마트 폰 애플리케이션 개발을 하고자 하는 경우에는 kotlin 을 고민해보고 하이브리드 앱(안드로이드 와 iOS 앱을 동시 개발) 생성 원리를 이해하고 react-native 또는 플로터 중 하나 정도는 해두는 것이 좋습니다.
=>빅데이터 구축 및 운영 및 클라우드 쪽으로 해보고자 하는 경우: 자바의 람다와 스트림 API 왜 사용하는지 알아두고 Linux, Docker, 쿠버네틱스를 학습하고 Hadoop 이나 Hadoop 의 에코 시스템을 학습
=>데이터 분석 이나 인공지능 은 아무래도 R 과 Python을 많이 이용 - jdk 설치하고 환경 변수 설정하는 방법은 알아야 합니다.
R 이나 Python 에서 한글 자연어 처리는 Java 로 합니다.
R에서 데이터베이스 연동도 자바로 할 수 있습니다.
R에서 개념을 잡고 Python 으로 실제 구현하는 것이 유리합니다.
선형 대수 와 통계학을 먼저 하고 하는 것이 좋습니다.

=>서버가 필요해서 공부해야 하는 경우라면 JavaScript 기반의 node.js 나 Python 기반의 Django 도 괜찮습니다.

=>모바일에서 서버가 필요한 경우고 자신의 앱을 구현하는 것이라면 서버의 역할을 Google 의 firebase에게 의존하는 것이 쉽습니다.

=>서버 개발자가 되고자 하는 경우는 AWS 나 Google 의 GCP, MS 의 Azure를 공부하는 것도 많은 도움이 됩니다.

=>게임 개발 이나 AR, VR 분야를 해보고자 하는 경우는 C# 기반의 Unity 3D 나 C++ 기반의 Unreal 을 해두면 좋습니다.
길게 하고자 할 때는 Open GL 까지 해두면 됩니다.








