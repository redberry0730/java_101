**Class
1.Recursion
=>메소드가 자기 자신을 리턴하는 것
=>재귀 호출이라고 하는데 복잡한 알고리즘을 간단하게 표현하기 위해서 사용
=>재귀 호출을 사용하게 되면 속도가 느려지고 메모리 사용량이 늘어납니다.
=>Recursion의 대표적인 형태가 합계, 팩토리얼, 피보나치 수열, 하노이 의 탑, quick sort 등

2.this
=>static 이 없는 메소드에서 사용할 수 있는 인스턴스 자신을 나타내는 숨겨진 변수
=>메소드 안에서 만든 지역변수에 클래스에서 만든 프로퍼티의 이름이 같을 때 메소드 안에서 프로퍼티를 호출할 때 this.프로퍼티  이름으로 호출하면 됩니다.
=>어떤 이름을 사용하게 되면 자신의 블럭에서 찾고 없으면 클래스(인스턴스)에서 찾고 거기도 없으면 상위 클래스에서 찾게 됩니다.
this.을 붙이게 되면 메소드 안에서는 찾지 않습니다.

3.접근자 메소드(getter and setter)
=>객체 지향에서는 프로퍼티는 private 으로 만들고 프로퍼티를 접근하기 위한 메소드를 별도로 만드는 것을 권장합니다.
이 때 프로퍼티의 값을 리턴하는 메소드를 getter 라고 합니다.
프로퍼티의 값을 변경하는 메소드를 setter 라고 합니다.

=>getter 는 이름이 get프로퍼티이름 으로 만들고 내용은 프로퍼티의 값을 리턴합니다.
프로퍼티의 첫글자는 대문자로 기재합니다.
프로퍼티의 자료형이 boolean 이면 get 대신에 is를 붙입니다.

=>setter는 이름이 set프로퍼티이름으로 만들고 매개변수가 프로퍼티의 자료형으로 1개가 있고 내용은 매개변수의 값을 프로퍼티에 대입하는 것입니다.

=>eclipse 에서는 직접 만들지 않고 [Source] - [Generate getters and setters]를 선택하고 프로퍼티들만 체크하면 자동으로 만들어 줍니다.

=>최근에 등장한 언어들은 프로퍼티를 만들면 접근자 메소드를 자동으로 만들어 줍니다.

4.생성자(Constructor, 초기화 메소드)
=>인스턴스를 만들 때 호출하는 메소드
=>이 메소드는 클래스 이름이나 인스턴스 이름으로 호출하지 않고 new 와 함께 호출하고 실행이 되고 나면 생성한 인스턴스의 참조를 리턴합니다.
1)규칙
이름이 클래스 이름과 동일해야 합니다.
리턴 타입이 없습니다.
this를 사용할 수 있습니다.
overloading이 가능합니다. - 메소드 이름은 같고 매개변수의 개수나 자료형이 다른 경우
클래스 안에 만들지 않으면 매개변수가 없는 생성자가 자동으로 만들어 집니다.
직접 만들면 기본적으로 제공되는 생성자는 없어집니다.

2)목적
=>초기화 작업을 위해서 생성

3)인스턴스 생성
클래스이름 변수이름 = new 생성자이름(매개변수);

4)생성자를 직접 작성할 필요 없이 [Source] - 매개변수가 없는 생성자와 매개변수가 있는 생성자를 만들어주는 메뉴를 제공합니다.

5.초기화 블럭
1)static 블럭
=>클래스 안에 static{ 내용 }을 작성하면 프로그램이 시작될 때 1번만 실행되는 코드를 작성할 수 있습니다.

2)초기화 블럭
=>클래스 안에 {내용}을 작성하면 인스턴스를 만들 때 마다 실행되는 코드를 작성할 수 있습니다. 

6.소멸자
=>인스턴스가 메모리에서 해제될 때 호출되는 메소드
=>자바에서 인스턴스는 자신을 참조하는 변수가 없을 때 메모리 해제 됩니다.
변수가 인스턴스 참조를 변경하는 방법은 다른 인스턴스의 참조를 대입하던지 null을 대입하면 됩니다.

=>인스턴스가 소멸될 때 어떤 작업을 수행시키고자 하면 클래스 안에 public void finalize() 메소드를 만들고 내용을 작성하면 됩니다.
=>이 때 수행하는 작업은 외부 자원(파일, 네트워크, 데이터베이스, 그래픽, 멀티미디어 등)을 사용하고 있는 경우 연결을 끊는 것입니다.

=>자바는 인스턴스가 메모리 정리 대상이 되면 바로 메모리 정리를 하는 것이 아니고 다른 작업이 없을 때(한가할 때) 정리 작업을 합니다.
강제로 메모리 정리를 하고자 하면 System.gc()를 호출하면 됩니다.
이 메소드는 안드로이드 나 웹 서버에서 호출하면 안됩니다.
안드로이드는 메모리 정리를 안드로이드가 하고 프로그램이 하면 안됩니다.
서버는 클라이언트에게 서비스를 제공하는데 메모리 정리를 하게되면 정리가 끝날 때 까지 클라이언트에게 서비스를 제공할 수 없을 수 있기 때문입니다. 

**package 와 import
1.package
=>유사한 역할을 수행하는 클래스의 집합
=>디렉토리와 유사
=>자바에서는 배포의 단위
=>하나의 디렉토리로 제공해도 되지만 jar 파일로 압축해서 제공해도 됩니다.
java 프로그램은 jar 로 압축된 것은 자신이 압축을 해제해서 사용을 합니다.

1)package 생성
=>src 디렉토리에서 마우스 오른쪽을 클릭하고 [New] - [Package]를 선택한 package 이름을 입력하면 됩니다.
=>package 안에 클래스를 만들면 클래스 이름은 패키지이름.클래스이름 이 됩니다.

2)package 이름을 정하는 방법
맨 앞의 두자리는 회사 도메인의 역순으로 작성을 하거나 이메일 주소의 역순으로 만들고 세번째 자리는 기술이름(프로젝트 이름)입니다.

2.import
=>자바에서는 줄여쓰기 위해서 사용
=>패키지이름을 import를 하면 패키지 안의 클래스를 사용할 때는 패키지 이름을 생략해도 됩니다.

=>import 패키지이름.클래스이름;
클래스만 패키지이름을 생략하고 사용할 수 있습니다.

=>import 패키지이름.*;
패키지 안의 클래스는 전부 이름을 생략하고 사용할 수 있습니다.

=>2가지 모두 작성하면 클래스 이름을 사용한 것이 우선순위가 높습니다.

3.자바에서 자주 사용하는 패키지
1)java.lang: 자바의 기본 패키지
2)java.util: 자료구조 클래스 나 스레드 관련 클래스
3)java.io: 파일 입출력
4)java.net: 네트워크 프로그래밍
5)java.sql: 데이터베이스 프로그래밍



